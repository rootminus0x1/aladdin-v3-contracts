block: 19210000
root:
  - "0xe7b9c7c9cA85340b8c06fb805f7775e3015108dB" # Market
leaf:
  - "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84" # stETH
  - "0xa84360896cE9152d1780c546305BB54125F962d9" # FxETHTwapOracle
  - "0x26B2ec4E02ebe2F54583af25b647b1D619e67BbF" # GnosisSafe (just has a list of owners)
  #  - "0xa3C5A1e09150B75ff251c1a7815A07182c3de2FB" # GnosisSafe__0
#  - "0x56B3c8eF8A095f8637B6A84942aA898326B82b91" # FxnDepositor
#  - "0xD71B8B76015F296E53D41e8288a8a13eAfFff2ea" # SmartWalletWhitelist__0
#  - "0x183395DbD0B5e93323a7286D1973150697FFFCB3" # cvxFXN (Convex FXN) cvxFxnToken
twig:
  - "0xd11a4Ee017cA0BECA8FA45fF2abFe9C6267b7881" # FxnVoterProxy
  - "0x365AccFCa291e7D3914637ABf1F7635dB165Bb09" # FXN (FXN Token)
  - "0xEC6B8A3F3605B083F7044C0F31f2cac0caf1d469" # veFXN (Voting Escrow FXN)

diagram:
  renderer: "elk"

plot:
  name: "CRxETH"
  xlabel: "Ether Price (USD)"
  independent:
    event: ETH
    start: 2200
    finish: 10
    step: -20
  ylabel: "collateral ratio"
  dependent:
    - calculations:
        - match:
            contract: stETHTreasury
            measurement: collateralRatio
          lineStyle: linewidth 2 dashtype 2
    - calculations:
        - simulation:
            - event: liquidate
              args: 0
        - match:
            contract: stETHTreasury
            measurement: collateralRatio
    - calculations:
        - simulation:
            - event: liquidate
              args: 1
        - match:
            contract: stETHTreasury
            measurement: collateralRatio
    - calculations:
        - simulation:
            - event: liquidate
              args: 2
        - match:
            contract: stETHTreasury
            measurement: collateralRatio

users:
  - name: admin # bao admin
  - name: fMinter #user who mints fTokens
    wallet:
      - { contract: Lido, amount: 10000 ether }
  - name: fHolderLiquidator # user who mints/liquidates fTokens
  - name: fHolderRedeemer # user who mint/redeems fTokens
  - name: xMinter # user who mint/redeems xTokens
  - name: xHolderRedeemer # user who mint/redeems xTokens

events:
  - name: mintFToken_1000eth
    user: fMinter
    contract: Market
    function: mintFToken
    args: [1000 ether, fMinter, 0]
  - name: mintFToken_finney
    user: fMinter
    contract: Market
    function: mintFToken
    args: [1 finney, fMinter, 0]
  - name: harvest
    user: fMinter
    contract: stETHTreasury
    function: harvest
    args: []

format:
  - reading: getPrice._safePrice
    precision: 1
  - reading: getPrice._minUnsafePrice
    precision: 1
  - reading: getPrice._maxUnsafePrice
    precision: 1
  - contract: Voting Escrow
    reading: balanceOf
    precision: 2
  - reading: emaLeverageRatio.lastTime
    precision: -1
  - reading: emaLeverageRatio.lastEmaValue
    precision: -13
  - type: uint256
    unit: ether
  - reading: latestAnswer
    type: int256
    unit: 8
  - reading: latestRoundData.answer
    type: int256
    unit: 8
  - contract: Market
    type: uint128
    unit: 16
  - contract: Market
    type: int128
    unit: 16
  - contract: Market
    type: uint64
    unit: 18
  # variable depending when run
  - reading: pendingRewards.0
    precision: 4
  - reading: pendingRewards.1
    precision: 4
  - contract: "Curve DAO Token"
    reading: available_supply
    precision: 0
  - reading: totalSupply
    precision: 0
  - reading: price_oracle
    precision: 9
  - reading: leverageRatio
    precision: 3 # because the price_oracle is not reliable, this isn't
  - reading: collateralRatio
    precision: 3
  - reading: _baseNav
    precision: 2
  - reading: _fNav
    precision: 3
  - reading: _xNav
    precision: 3
  - reading: pendingRewards
    precision: 4
  # no formatting
  - contract: BoostableRebalancePool
    reading: numTotalSupplyHistory
  - reading: chainlinkMinMessageCount
  - reading: chainlinkMessageExpiration
  - reading: start_epoch_time
  - reading: getChainId
  - reading: getThreshold
  - reading: nonce
  - reading: decimals
  - reading: epoch
  - reading: time_total
  - reading: numTotalSupplyHistory
  - reading: latestRoundData.startedAt
  - reading: latestRoundData.updatedAt
  - reading: latestTimestamp
  - reading: version
  - reading: getRewardCount
