simulation: []
addresses:
  BoostableRebalancePool__0: BoostableRebalancePool@0xc6dEe5913e010895F3702bc43a40d661B13a40BD
  BoostableRebalancePool__1: BoostableRebalancePool@0xB87A8332dFb1C76Bb22477dCfEdDeB69865cA9f9
  Booster: Booster@0x91e575C0CC6E8BC530d897d3d425B57B49A821C6
  Curve_DAO_Token: Curve DAO Token@0x365AccFCa291e7D3914637ABf1F7635dB165Bb09
  FractionalToken: FractionalToken@0x53805A76E1f5ebbFE7115F16f9c87C2f7e633726
  FxnDepositor: FxnDepositor@0x56B3c8eF8A095f8637B6A84942aA898326B82b91
  FxnVoterProxy: FxnVoterProxy@0xd11a4Ee017cA0BECA8FA45fF2abFe9C6267b7881
  Gauge_Controller: Gauge Controller@0xe60eB8098B34eD775ac44B1ddE864e098C6d7f37
  GnosisSafe__0: GnosisSafe@0x26B2ec4E02ebe2F54583af25b647b1D619e67BbF
  GnosisSafe__1: GnosisSafe@0xa3C5A1e09150B75ff251c1a7815A07182c3de2FB
  LeveragedToken: LeveragedToken@0xe063F04f280c60aECa68b38341C2eEcBeC703ae2
  Lido: Lido@0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84
  Market: Market@0xe7b9c7c9cA85340b8c06fb805f7775e3015108dB
  MockFxPriceOracle: MockFxPriceOracle@0xF357118EBd576f3C812c7875B1A1651a7f140E9C
  PlatformFeeSpliter: PlatformFeeSpliter@0x0084C2e1B1823564e597Ff4848a88D61ac63D703
  RebalancePool: RebalancePool@0xa677d95B91530d56791FbA72C01a862f1B01A49e
  RebalancePoolRegistry: RebalancePoolRegistry@0x4eEfea49e4D876599765d5375cF7314cD14C9d38
  RebalancePoolSplitter: RebalancePoolSplitter@0x79c5f5b0753acE25ecdBdA4c2Bc86Ab074B6c2Bb
  RebalanceWithBonusToken__0: RebalanceWithBonusToken@0x17f21f468d77E6e35702a9Ae7a9da50Db7F6a4f4
  RebalanceWithBonusToken__1: RebalanceWithBonusToken@0x74E9234A6e03c382A01Bb942B1aF05B639371309
  RebalanceWithBonusToken__2: RebalanceWithBonusToken@0x5a161B94c737326cA115eC46f4Eaf4eEC5037dBE
  ReservePool: ReservePool@0x5d0Aacf75116d1645Db2B3d1Ca4b303ef0CA3752
  SmartWalletWhitelist: SmartWalletWhitelist@0xD71B8B76015F296E53D41e8288a8a13eAfFff2ea
  StETHAndxETHWrapper: StETHAndxETHWrapper@0xC2BdBF323304eaBd9260b42E4d0d429Ca3481d6E
  stETHTreasury: stETHTreasury@0x0e5CAA5c889Bdf053c9A76395f62267E653AFbb0
  Token_Minter: Token Minter@0xC8b194925D55d5dE9555AD1db74c149329F71DeF
  Voting_Escrow: Voting Escrow@0xEC6B8A3F3605B083F7044C0F31f2cac0caf1d469
  WstETH: WstETH@0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0
  wstETHWrapper: wstETHWrapper@0xb09e34dD25d5E88a1E9Ff6F6418109927675B658
contracts:
  BoostableRebalancePool:
    asset: address
    balanceOf: uint256
    baseToken: address
    boostCheckpoint.historyIndex: uint32
    boostCheckpoint.veBalance: uint112
    boostCheckpoint.veSupply: uint112
    distributors: address
    fxn: address
    gauge.claimAt: uint64
    gauge.gauge: address
    getActiveRewardTokens: address[]
    getBoostRatio: uint256
    getHistoricalRewardTokens: address[]
    lastAssetLossError: uint256
    liquidatableCollateralRatio: uint256
    market: address
    minter: address
    numTotalSupplyHistory: uint256
    pendingRewards.0: uint256
    pendingRewards.1: uint256
    periodLength: uint40
    rewardData.finishAt: uint40
    rewardData.lastUpdate: uint40
    rewardData.queued: uint96
    rewardData.rate: uint80
    rewardReceiver: address
    totalSupply: uint256
    treasury: address
    ve: address
    wrapper: address
  Booster:
    cvxfxn: address
    feeclaimer: address
    feeDistro: address
    feeQueue: address
    feeToken: address
    fxn: address
    fxnDepositor: address
    owner: address
    pendingOwner: address
    proxy: address
    rewardManager: address
  Curve DAO Token:
    admin: address
    available_supply: uint256
    balanceOf: uint256
    decimals: uint256
    INITIAL_RATE: uint256
    mining_epoch: int128
    minter: address
    rate: uint256
    RATE_REDUCTION_COEFFICIENT: uint256
    start_epoch_time: uint256
    totalSupply: uint256
  FractionalToken:
    balanceOf: uint256
    decimals: uint8
    nav: uint256
    totalSupply: uint256
    treasury: address
  FxnDepositor:
    DENOMINATOR: uint256
    escrow: address
    fxn: address
    minter: address
    owner: address
    pendingOwner: address
    platformDeposit: address
    platformHolding: uint256
    staker: address
    unlockTime: uint256
  FxnVoterProxy:
    depositor: address
    escrow: address
    fxn: address
    operator: address
    owner: address
    pendingOwner: address
  Gauge Controller:
    admin: address
    future_admin: address
    gauge_relative_weight: uint256
    gauge_types: int128
    get_gauge_weight: uint256
    get_total_weight: uint256
    n_gauge_types: int128
    n_gauges: int128
    time_total: uint256
    time_weight: uint256
    token: address
    vote_user_power: uint256
    voting_escrow: address
  GnosisSafe:
    getChainId: uint256
    getOwners: address[]
    getThreshold: uint256
    nonce: uint256
    getModules: address[]
  LeveragedToken:
    balanceOf: uint256
    decimals: uint8
    fToken: address
    nav: uint256
    totalSupply: uint256
    treasury: address
  Lido:
    balanceOf: uint256
    decimals: uint8
    eip712Domain.chainId: uint256
    eip712Domain.verifyingContract: address
    getBeaconStat.beaconBalance: uint256
    getBeaconStat.beaconValidators: uint256
    getBeaconStat.depositedValidators: uint256
    getBufferedEther: uint256
    getContractVersion: uint256
    getCurrentStakeLimit: uint256
    getDepositableEther: uint256
    getEIP712StETH: address
    getEVMScriptRegistry: address
    getFee: uint16
    getFeeDistribution.insuranceFeeBasisPoints: uint16
    getFeeDistribution.operatorsFeeBasisPoints: uint16
    getFeeDistribution.treasuryFeeBasisPoints: uint16
    getInitializationBlock: uint256
    getLidoLocator: address
    getOracle: address
    getRecoveryVault: address
    getStakeLimitFullInfo.currentStakeLimit: uint256
    getStakeLimitFullInfo.maxStakeLimit: uint256
    getStakeLimitFullInfo.maxStakeLimitGrowthBlocks: uint256
    getStakeLimitFullInfo.prevStakeBlockNumber: uint256
    getStakeLimitFullInfo.prevStakeLimit: uint256
    getTotalELRewardsCollected: uint256
    getTotalPooledEther: uint256
    getTotalShares: uint256
    getTreasury: address
    kernel: address
    nonces: uint256
    sharesOf: uint256
    totalSupply: uint256
  Market:
    baseToken: address
    fToken: address
    fTokenMintFeeRatio.defaultFeeRatio: uint128
    fTokenMintFeeRatio.extraFeeRatio: int128
    fTokenRedeemFeeRatio.defaultFeeRatio: uint128
    fTokenRedeemFeeRatio.extraFeeRatio: int128
    incentiveConfig.liquidationIncentiveRatio: uint64
    incentiveConfig.selfLiquidationIncentiveRatio: uint64
    incentiveConfig.stabilityIncentiveRatio: uint64
    marketConfig.liquidationRatio: uint64
    marketConfig.recapRatio: uint64
    marketConfig.selfLiquidationRatio: uint64
    marketConfig.stabilityRatio: uint64
    platform: address
    registry: address
    reservePool: address
    treasury: address
    xToken: address
    xTokenMintFeeRatio.defaultFeeRatio: uint128
    xTokenMintFeeRatio.extraFeeRatio: int128
    xTokenRedeemFeeRatio.defaultFeeRatio: uint128
    xTokenRedeemFeeRatio.extraFeeRatio: int128
  MockFxPriceOracle:
    getPrice._maxUnsafePrice: uint256
    getPrice._minUnsafePrice: uint256
    getPrice._safePrice: uint256
    price: uint256
  PlatformFeeSpliter:
    burners: address
    ecosystem: address
    getRewardCount: uint256
    owner: address
    staker: address
    treasury: address
  RebalancePool:
    asset: address
    balanceOf: uint256
    baseRewardToken: address
    baseToken: address
    epochState.epoch: uint64
    epochState.prod: uint128
    epochState.scale: uint64
    extraRewardsLength: uint256
    extraRewardState.finishAt: uint48
    extraRewardState.lastUpdate: uint48
    extraRewardState.periodLength: uint32
    extraRewardState.queued: uint256
    extraRewardState.rate: uint128
    lastAssetLossError: uint256
    liquidatableCollateralRatio: uint256
    liquidator: address
    market: address
    owner: address
    rewardManager: address
    totalSupply: uint256
    totalUnlocking: uint256
    treasury: address
    unlockDuration: uint256
    unlockedBalanceOf: uint256
    unlockingBalanceOf._balance: uint256
    unlockingBalanceOf._unlockAt: uint256
    wrapper: address
  RebalancePoolRegistry:
    getPools: address[]
    owner: address
    pendingOwner: address
    totalSupply: uint256
  RebalancePoolSplitter:
    getReceivers._ratios: uint256[]
    getReceivers._receivers: address[]
    owner: address
    pendingOwner: address
    splitter: address
  RebalanceWithBonusToken:
    bonus: uint256
    bonusToken: address
    owner: address
    stabilityPool: address
  ReservePool:
    bonusRatio: uint256
    fToken: address
    market: address
  SmartWalletWhitelist:
    checker: address
    future_checker: address
    owner: address
  StETHAndxETHWrapper:
    dst: address
    market: address
    platform: address
    src: address
  stETHTreasury:
    baseToken: address
    baseTokenCap: uint256
    beta: uint256
    collateralRatio: uint256
    emaLeverageRatio.lastEmaValue: uint96
    emaLeverageRatio.lastTime: uint40
    emaLeverageRatio.lastValue: uint96
    emaLeverageRatio.sampleInterval: uint24
    fToken: address
    getCurrentNav._baseNav: uint256
    getCurrentNav._fNav: uint256
    getCurrentNav._xNav: uint256
    harvestBountyRatio: uint128
    lastPermissionedPrice: uint256
    leverageRatio: uint256
    market: address
    owner: address
    platform: address
    priceOracle: address
    rateProvider: address
    rebalancePool: address
    rebalancePoolRatio: uint128
    strategy: address
    strategyUnderlying: uint256
    totalBaseToken: uint256
    xToken: address
  Token Minter:
    controller: address
    token: address
  Voting Escrow:
    admin: address
    balanceOf: uint256
    controller: address
    decimals: uint256
    epoch: uint256
    future_admin: address
    future_smart_wallet_checker: address
    get_last_user_slope: int128
    locked__end: uint256
    smart_wallet_checker: address
    supply: uint256
    token: address
    totalSupply: uint256
    user_point_epoch: uint256
  WstETH:
    balanceOf: uint256
    decimals: uint8
    nonces: uint256
    stETH: address
    stEthPerToken: uint256
    tokensPerStEth: uint256
    totalSupply: uint256
  wstETHWrapper:
    dst: address
    src: address
readings:
  BoostableRebalancePool__0.asset: FractionalToken
  BoostableRebalancePool__0.balanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(admin): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(BoostableRebalancePool__1): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(Booster): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(Curve_DAO_Token): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(fHolderLiquidator): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(fHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(fMinter): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(FractionalToken): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(FxnDepositor): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(FxnVoterProxy): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(Gauge_Controller): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(GnosisSafe__0): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(GnosisSafe__1): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(LeveragedToken): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(Lido): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(Market): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(PlatformFeeSpliter): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(RebalancePool): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(RebalancePoolRegistry): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(RebalancePoolSplitter): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(RebalanceWithBonusToken__0): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(RebalanceWithBonusToken__1): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(RebalanceWithBonusToken__2): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(ReservePool): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(SmartWalletWhitelist): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(StETHAndxETHWrapper): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(stETHTreasury): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(Token_Minter): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(Voting_Escrow): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(WstETH): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(wstETHWrapper): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(xHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.balanceOf(xMinter): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.baseToken: Lido
  BoostableRebalancePool__0.boostCheckpoint($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(admin).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(admin).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(admin).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(BoostableRebalancePool__1).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(BoostableRebalancePool__1).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(BoostableRebalancePool__1).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Booster).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Booster).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Booster).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Curve_DAO_Token).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Curve_DAO_Token).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Curve_DAO_Token).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(fHolderLiquidator).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(fHolderLiquidator).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(fHolderLiquidator).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(fHolderRedeemer).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(fHolderRedeemer).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(fHolderRedeemer).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(fMinter).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(fMinter).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(fMinter).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(FractionalToken).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(FractionalToken).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(FractionalToken).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(FxnDepositor).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(FxnDepositor).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(FxnDepositor).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(FxnVoterProxy).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(FxnVoterProxy).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(FxnVoterProxy).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Gauge_Controller).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Gauge_Controller).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Gauge_Controller).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(GnosisSafe__0).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(GnosisSafe__0).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(GnosisSafe__0).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(GnosisSafe__1).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(GnosisSafe__1).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(GnosisSafe__1).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(LeveragedToken).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(LeveragedToken).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(LeveragedToken).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Lido).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Lido).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Lido).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Market).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Market).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Market).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(MockFxPriceOracle).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(MockFxPriceOracle).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(MockFxPriceOracle).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(PlatformFeeSpliter).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(PlatformFeeSpliter).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(PlatformFeeSpliter).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalancePool).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalancePool).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalancePool).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalancePoolRegistry).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalancePoolRegistry).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalancePoolRegistry).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalancePoolSplitter).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalancePoolSplitter).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalancePoolSplitter).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalanceWithBonusToken__0).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalanceWithBonusToken__0).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalanceWithBonusToken__0).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalanceWithBonusToken__1).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalanceWithBonusToken__1).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalanceWithBonusToken__1).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalanceWithBonusToken__2).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalanceWithBonusToken__2).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(RebalanceWithBonusToken__2).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(ReservePool).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(ReservePool).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(ReservePool).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(SmartWalletWhitelist).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(SmartWalletWhitelist).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(SmartWalletWhitelist).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(StETHAndxETHWrapper).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(StETHAndxETHWrapper).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(StETHAndxETHWrapper).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(stETHTreasury).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(stETHTreasury).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(stETHTreasury).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Token_Minter).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Token_Minter).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Token_Minter).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Voting_Escrow).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Voting_Escrow).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(Voting_Escrow).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(WstETH).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(WstETH).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(WstETH).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(wstETHWrapper).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(wstETHWrapper).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(wstETHWrapper).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(xHolderRedeemer).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(xHolderRedeemer).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(xHolderRedeemer).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(xMinter).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(xMinter).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(xMinter).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.distributors($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(admin): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(BoostableRebalancePool__1): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(Booster): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(Curve_DAO_Token): RebalancePoolSplitter
  BoostableRebalancePool__0.distributors(fHolderLiquidator): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(fHolderRedeemer): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(fMinter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(FractionalToken): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(FxnDepositor): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(FxnVoterProxy): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(Gauge_Controller): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(GnosisSafe__0): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(GnosisSafe__1): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(LeveragedToken): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(Lido): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(Market): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(PlatformFeeSpliter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(RebalancePool): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(RebalancePoolRegistry): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(RebalancePoolSplitter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(RebalanceWithBonusToken__0): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(RebalanceWithBonusToken__1): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(RebalanceWithBonusToken__2): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(ReservePool): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(SmartWalletWhitelist): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(StETHAndxETHWrapper): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(stETHTreasury): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(Token_Minter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(Voting_Escrow): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(WstETH): RebalancePoolSplitter
  BoostableRebalancePool__0.distributors(wstETHWrapper): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(xHolderRedeemer): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.distributors(xMinter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.fxn: Curve_DAO_Token
  BoostableRebalancePool__0.gauge.claimAt: '0'
  BoostableRebalancePool__0.gauge.gauge: '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.getActiveRewardTokens:
    - WstETH
    - Curve_DAO_Token
  BoostableRebalancePool__0.getBoostRatio($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(admin): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(BoostableRebalancePool__1): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(Booster): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(Curve_DAO_Token): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(fHolderLiquidator): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(fHolderRedeemer): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(fMinter): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(FractionalToken): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(FxnDepositor): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(FxnVoterProxy): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(Gauge_Controller): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(GnosisSafe__0): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(GnosisSafe__1): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(LeveragedToken): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(Lido): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(Market): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(MockFxPriceOracle): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(PlatformFeeSpliter): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(RebalancePool): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(RebalancePoolRegistry): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(RebalancePoolSplitter): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(RebalanceWithBonusToken__0): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(RebalanceWithBonusToken__1): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(RebalanceWithBonusToken__2): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(ReservePool): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(SmartWalletWhitelist): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(StETHAndxETHWrapper): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(stETHTreasury): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(Token_Minter): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(Voting_Escrow): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(WstETH): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(wstETHWrapper): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(xHolderRedeemer): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getBoostRatio(xMinter): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.getHistoricalRewardTokens: []
  BoostableRebalancePool__0.lastAssetLossError: '0.0 # {unit:ether}'
  BoostableRebalancePool__0.liquidatableCollateralRatio: '1.3055 # {unit:ether}'
  BoostableRebalancePool__0.market: Market
  BoostableRebalancePool__0.minter: Token_Minter
  BoostableRebalancePool__0.numTotalSupplyHistory: '136 # {}'
  BoostableRebalancePool__0.pendingRewards($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(admin).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(admin).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(BoostableRebalancePool__1).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(BoostableRebalancePool__1).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Booster).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Booster).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Curve_DAO_Token).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Curve_DAO_Token).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(fHolderLiquidator).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(fHolderLiquidator).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(fHolderRedeemer).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(fHolderRedeemer).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(fMinter).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(fMinter).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(FractionalToken).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(FractionalToken).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(FxnDepositor).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(FxnDepositor).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(FxnVoterProxy).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(FxnVoterProxy).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Gauge_Controller).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Gauge_Controller).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(GnosisSafe__0).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(GnosisSafe__0).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(GnosisSafe__1).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(GnosisSafe__1).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(LeveragedToken).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(LeveragedToken).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Lido).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Lido).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Market).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Market).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(MockFxPriceOracle).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(MockFxPriceOracle).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(PlatformFeeSpliter).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(PlatformFeeSpliter).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalancePool).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalancePool).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalancePoolRegistry).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalancePoolRegistry).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalancePoolSplitter).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalancePoolSplitter).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalanceWithBonusToken__0).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalanceWithBonusToken__0).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalanceWithBonusToken__1).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalanceWithBonusToken__1).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalanceWithBonusToken__2).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(RebalanceWithBonusToken__2).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(ReservePool).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(ReservePool).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(SmartWalletWhitelist).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(SmartWalletWhitelist).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(StETHAndxETHWrapper).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(StETHAndxETHWrapper).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(stETHTreasury).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(stETHTreasury).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Token_Minter).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Token_Minter).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Voting_Escrow).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(Voting_Escrow).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(WstETH).0: '0.140 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(WstETH).1: '1.201 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(wstETHWrapper).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(wstETHWrapper).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(xHolderRedeemer).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(xHolderRedeemer).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(xMinter).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.pendingRewards(xMinter).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__0.periodLength: '604800'
  BoostableRebalancePool__0.rewardData($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).finishAt: '0'
  BoostableRebalancePool__0.rewardData($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).queued: '0'
  BoostableRebalancePool__0.rewardData($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).rate: '0'
  BoostableRebalancePool__0.rewardData(admin).finishAt: '0'
  BoostableRebalancePool__0.rewardData(admin).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(admin).queued: '0'
  BoostableRebalancePool__0.rewardData(admin).rate: '0'
  BoostableRebalancePool__0.rewardData(BoostableRebalancePool__1).finishAt: '0'
  BoostableRebalancePool__0.rewardData(BoostableRebalancePool__1).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(BoostableRebalancePool__1).queued: '0'
  BoostableRebalancePool__0.rewardData(BoostableRebalancePool__1).rate: '0'
  BoostableRebalancePool__0.rewardData(Booster).finishAt: '0'
  BoostableRebalancePool__0.rewardData(Booster).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(Booster).queued: '0'
  BoostableRebalancePool__0.rewardData(Booster).rate: '0'
  BoostableRebalancePool__0.rewardData(Curve_DAO_Token).finishAt: '0'
  BoostableRebalancePool__0.rewardData(Curve_DAO_Token).lastUpdate: '1707654215'
  BoostableRebalancePool__0.rewardData(Curve_DAO_Token).queued: '0'
  BoostableRebalancePool__0.rewardData(Curve_DAO_Token).rate: '0'
  BoostableRebalancePool__0.rewardData(fHolderLiquidator).finishAt: '0'
  BoostableRebalancePool__0.rewardData(fHolderLiquidator).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(fHolderLiquidator).queued: '0'
  BoostableRebalancePool__0.rewardData(fHolderLiquidator).rate: '0'
  BoostableRebalancePool__0.rewardData(fHolderRedeemer).finishAt: '0'
  BoostableRebalancePool__0.rewardData(fHolderRedeemer).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(fHolderRedeemer).queued: '0'
  BoostableRebalancePool__0.rewardData(fHolderRedeemer).rate: '0'
  BoostableRebalancePool__0.rewardData(fMinter).finishAt: '0'
  BoostableRebalancePool__0.rewardData(fMinter).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(fMinter).queued: '0'
  BoostableRebalancePool__0.rewardData(fMinter).rate: '0'
  BoostableRebalancePool__0.rewardData(FractionalToken).finishAt: '0'
  BoostableRebalancePool__0.rewardData(FractionalToken).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(FractionalToken).queued: '0'
  BoostableRebalancePool__0.rewardData(FractionalToken).rate: '0'
  BoostableRebalancePool__0.rewardData(FxnDepositor).finishAt: '0'
  BoostableRebalancePool__0.rewardData(FxnDepositor).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(FxnDepositor).queued: '0'
  BoostableRebalancePool__0.rewardData(FxnDepositor).rate: '0'
  BoostableRebalancePool__0.rewardData(FxnVoterProxy).finishAt: '0'
  BoostableRebalancePool__0.rewardData(FxnVoterProxy).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(FxnVoterProxy).queued: '0'
  BoostableRebalancePool__0.rewardData(FxnVoterProxy).rate: '0'
  BoostableRebalancePool__0.rewardData(Gauge_Controller).finishAt: '0'
  BoostableRebalancePool__0.rewardData(Gauge_Controller).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(Gauge_Controller).queued: '0'
  BoostableRebalancePool__0.rewardData(Gauge_Controller).rate: '0'
  BoostableRebalancePool__0.rewardData(GnosisSafe__0).finishAt: '0'
  BoostableRebalancePool__0.rewardData(GnosisSafe__0).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(GnosisSafe__0).queued: '0'
  BoostableRebalancePool__0.rewardData(GnosisSafe__0).rate: '0'
  BoostableRebalancePool__0.rewardData(GnosisSafe__1).finishAt: '0'
  BoostableRebalancePool__0.rewardData(GnosisSafe__1).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(GnosisSafe__1).queued: '0'
  BoostableRebalancePool__0.rewardData(GnosisSafe__1).rate: '0'
  BoostableRebalancePool__0.rewardData(LeveragedToken).finishAt: '0'
  BoostableRebalancePool__0.rewardData(LeveragedToken).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(LeveragedToken).queued: '0'
  BoostableRebalancePool__0.rewardData(LeveragedToken).rate: '0'
  BoostableRebalancePool__0.rewardData(Lido).finishAt: '0'
  BoostableRebalancePool__0.rewardData(Lido).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(Lido).queued: '0'
  BoostableRebalancePool__0.rewardData(Lido).rate: '0'
  BoostableRebalancePool__0.rewardData(Market).finishAt: '0'
  BoostableRebalancePool__0.rewardData(Market).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(Market).queued: '0'
  BoostableRebalancePool__0.rewardData(Market).rate: '0'
  BoostableRebalancePool__0.rewardData(MockFxPriceOracle).finishAt: '0'
  BoostableRebalancePool__0.rewardData(MockFxPriceOracle).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(MockFxPriceOracle).queued: '0'
  BoostableRebalancePool__0.rewardData(MockFxPriceOracle).rate: '0'
  BoostableRebalancePool__0.rewardData(PlatformFeeSpliter).finishAt: '0'
  BoostableRebalancePool__0.rewardData(PlatformFeeSpliter).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(PlatformFeeSpliter).queued: '0'
  BoostableRebalancePool__0.rewardData(PlatformFeeSpliter).rate: '0'
  BoostableRebalancePool__0.rewardData(RebalancePool).finishAt: '0'
  BoostableRebalancePool__0.rewardData(RebalancePool).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(RebalancePool).queued: '0'
  BoostableRebalancePool__0.rewardData(RebalancePool).rate: '0'
  BoostableRebalancePool__0.rewardData(RebalancePoolRegistry).finishAt: '0'
  BoostableRebalancePool__0.rewardData(RebalancePoolRegistry).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(RebalancePoolRegistry).queued: '0'
  BoostableRebalancePool__0.rewardData(RebalancePoolRegistry).rate: '0'
  BoostableRebalancePool__0.rewardData(RebalancePoolSplitter).finishAt: '0'
  BoostableRebalancePool__0.rewardData(RebalancePoolSplitter).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(RebalancePoolSplitter).queued: '0'
  BoostableRebalancePool__0.rewardData(RebalancePoolSplitter).rate: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__0).finishAt: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__0).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__0).queued: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__0).rate: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__1).finishAt: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__1).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__1).queued: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__1).rate: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__2).finishAt: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__2).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__2).queued: '0'
  BoostableRebalancePool__0.rewardData(RebalanceWithBonusToken__2).rate: '0'
  BoostableRebalancePool__0.rewardData(ReservePool).finishAt: '0'
  BoostableRebalancePool__0.rewardData(ReservePool).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(ReservePool).queued: '0'
  BoostableRebalancePool__0.rewardData(ReservePool).rate: '0'
  BoostableRebalancePool__0.rewardData(SmartWalletWhitelist).finishAt: '0'
  BoostableRebalancePool__0.rewardData(SmartWalletWhitelist).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(SmartWalletWhitelist).queued: '0'
  BoostableRebalancePool__0.rewardData(SmartWalletWhitelist).rate: '0'
  BoostableRebalancePool__0.rewardData(StETHAndxETHWrapper).finishAt: '0'
  BoostableRebalancePool__0.rewardData(StETHAndxETHWrapper).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(StETHAndxETHWrapper).queued: '0'
  BoostableRebalancePool__0.rewardData(StETHAndxETHWrapper).rate: '0'
  BoostableRebalancePool__0.rewardData(stETHTreasury).finishAt: '0'
  BoostableRebalancePool__0.rewardData(stETHTreasury).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(stETHTreasury).queued: '0'
  BoostableRebalancePool__0.rewardData(stETHTreasury).rate: '0'
  BoostableRebalancePool__0.rewardData(Token_Minter).finishAt: '0'
  BoostableRebalancePool__0.rewardData(Token_Minter).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(Token_Minter).queued: '0'
  BoostableRebalancePool__0.rewardData(Token_Minter).rate: '0'
  BoostableRebalancePool__0.rewardData(Voting_Escrow).finishAt: '0'
  BoostableRebalancePool__0.rewardData(Voting_Escrow).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(Voting_Escrow).queued: '0'
  BoostableRebalancePool__0.rewardData(Voting_Escrow).rate: '0'
  BoostableRebalancePool__0.rewardData(WstETH).finishAt: '1708259015'
  BoostableRebalancePool__0.rewardData(WstETH).lastUpdate: '1707654215'
  BoostableRebalancePool__0.rewardData(WstETH).queued: '492028'
  BoostableRebalancePool__0.rewardData(WstETH).rate: '2217091562984'
  BoostableRebalancePool__0.rewardData(wstETHWrapper).finishAt: '0'
  BoostableRebalancePool__0.rewardData(wstETHWrapper).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(wstETHWrapper).queued: '0'
  BoostableRebalancePool__0.rewardData(wstETHWrapper).rate: '0'
  BoostableRebalancePool__0.rewardData(xHolderRedeemer).finishAt: '0'
  BoostableRebalancePool__0.rewardData(xHolderRedeemer).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(xHolderRedeemer).queued: '0'
  BoostableRebalancePool__0.rewardData(xHolderRedeemer).rate: '0'
  BoostableRebalancePool__0.rewardData(xMinter).finishAt: '0'
  BoostableRebalancePool__0.rewardData(xMinter).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(xMinter).queued: '0'
  BoostableRebalancePool__0.rewardData(xMinter).rate: '0'
  BoostableRebalancePool__0.rewardReceiver($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(admin): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(BoostableRebalancePool__1): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(Booster): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(Curve_DAO_Token): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(fHolderLiquidator): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(fHolderRedeemer): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(fMinter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(FractionalToken): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(FxnDepositor): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(FxnVoterProxy): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(Gauge_Controller): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(GnosisSafe__0): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(GnosisSafe__1): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(LeveragedToken): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(Lido): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(Market): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(PlatformFeeSpliter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(RebalancePool): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(RebalancePoolRegistry): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(RebalancePoolSplitter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(RebalanceWithBonusToken__0): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(RebalanceWithBonusToken__1): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(RebalanceWithBonusToken__2): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(ReservePool): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(SmartWalletWhitelist): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(StETHAndxETHWrapper): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(stETHTreasury): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(Token_Minter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(Voting_Escrow): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(WstETH): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(wstETHWrapper): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(xHolderRedeemer): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.rewardReceiver(xMinter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.totalSupply: '5688691 # {precision:0,unit:ether}'
  BoostableRebalancePool__0.treasury: stETHTreasury
  BoostableRebalancePool__0.ve: Voting_Escrow
  BoostableRebalancePool__0.wrapper: wstETHWrapper
  BoostableRebalancePool__1.asset: FractionalToken
  BoostableRebalancePool__1.balanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(admin): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(BoostableRebalancePool__0): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(Booster): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(Curve_DAO_Token): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(fHolderLiquidator): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(fHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(fMinter): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(FractionalToken): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(FxnDepositor): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(FxnVoterProxy): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(Gauge_Controller): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(GnosisSafe__0): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(GnosisSafe__1): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(LeveragedToken): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(Lido): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(Market): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(PlatformFeeSpliter): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(RebalancePool): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(RebalancePoolRegistry): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(RebalancePoolSplitter): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(RebalanceWithBonusToken__0): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(RebalanceWithBonusToken__1): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(RebalanceWithBonusToken__2): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(ReservePool): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(SmartWalletWhitelist): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(StETHAndxETHWrapper): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(stETHTreasury): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(Token_Minter): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(Voting_Escrow): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(WstETH): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(wstETHWrapper): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(xHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.balanceOf(xMinter): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.baseToken: Lido
  BoostableRebalancePool__1.boostCheckpoint($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(admin).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(admin).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(admin).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(BoostableRebalancePool__0).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(BoostableRebalancePool__0).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(BoostableRebalancePool__0).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Booster).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Booster).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Booster).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Curve_DAO_Token).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Curve_DAO_Token).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Curve_DAO_Token).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(fHolderLiquidator).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(fHolderLiquidator).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(fHolderLiquidator).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(fHolderRedeemer).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(fHolderRedeemer).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(fHolderRedeemer).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(fMinter).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(fMinter).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(fMinter).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(FractionalToken).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(FractionalToken).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(FractionalToken).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(FxnDepositor).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(FxnDepositor).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(FxnDepositor).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(FxnVoterProxy).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(FxnVoterProxy).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(FxnVoterProxy).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Gauge_Controller).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Gauge_Controller).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Gauge_Controller).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(GnosisSafe__0).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(GnosisSafe__0).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(GnosisSafe__0).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(GnosisSafe__1).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(GnosisSafe__1).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(GnosisSafe__1).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(LeveragedToken).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(LeveragedToken).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(LeveragedToken).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Lido).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Lido).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Lido).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Market).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Market).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Market).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(MockFxPriceOracle).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(MockFxPriceOracle).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(MockFxPriceOracle).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(PlatformFeeSpliter).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(PlatformFeeSpliter).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(PlatformFeeSpliter).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalancePool).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalancePool).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalancePool).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalancePoolRegistry).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalancePoolRegistry).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalancePoolRegistry).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalancePoolSplitter).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalancePoolSplitter).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalancePoolSplitter).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalanceWithBonusToken__0).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalanceWithBonusToken__0).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalanceWithBonusToken__0).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalanceWithBonusToken__1).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalanceWithBonusToken__1).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalanceWithBonusToken__1).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalanceWithBonusToken__2).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalanceWithBonusToken__2).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(RebalanceWithBonusToken__2).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(ReservePool).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(ReservePool).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(ReservePool).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(SmartWalletWhitelist).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(SmartWalletWhitelist).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(SmartWalletWhitelist).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(StETHAndxETHWrapper).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(StETHAndxETHWrapper).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(StETHAndxETHWrapper).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(stETHTreasury).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(stETHTreasury).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(stETHTreasury).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Token_Minter).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Token_Minter).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Token_Minter).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Voting_Escrow).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Voting_Escrow).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(Voting_Escrow).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(WstETH).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(WstETH).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(WstETH).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(wstETHWrapper).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(wstETHWrapper).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(wstETHWrapper).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(xHolderRedeemer).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(xHolderRedeemer).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(xHolderRedeemer).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(xMinter).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(xMinter).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(xMinter).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.distributors($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(admin): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(BoostableRebalancePool__0): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(Booster): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(Curve_DAO_Token): RebalancePoolSplitter
  BoostableRebalancePool__1.distributors(fHolderLiquidator): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(fHolderRedeemer): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(fMinter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(FractionalToken): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(FxnDepositor): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(FxnVoterProxy): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(Gauge_Controller): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(GnosisSafe__0): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(GnosisSafe__1): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(LeveragedToken): BoostableRebalancePool__1
  BoostableRebalancePool__1.distributors(Lido): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(Market): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(PlatformFeeSpliter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(RebalancePool): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(RebalancePoolRegistry): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(RebalancePoolSplitter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(RebalanceWithBonusToken__0): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(RebalanceWithBonusToken__1): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(RebalanceWithBonusToken__2): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(ReservePool): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(SmartWalletWhitelist): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(StETHAndxETHWrapper): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(stETHTreasury): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(Token_Minter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(Voting_Escrow): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(WstETH): RebalancePoolSplitter
  BoostableRebalancePool__1.distributors(wstETHWrapper): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(xHolderRedeemer): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.distributors(xMinter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.fxn: Curve_DAO_Token
  BoostableRebalancePool__1.gauge.claimAt: '0'
  BoostableRebalancePool__1.gauge.gauge: '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.getActiveRewardTokens:
    - WstETH
    - LeveragedToken
    - Curve_DAO_Token
  BoostableRebalancePool__1.getBoostRatio($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(admin): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(BoostableRebalancePool__0): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(Booster): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(Curve_DAO_Token): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(fHolderLiquidator): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(fHolderRedeemer): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(fMinter): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(FractionalToken): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(FxnDepositor): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(FxnVoterProxy): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(Gauge_Controller): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(GnosisSafe__0): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(GnosisSafe__1): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(LeveragedToken): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(Lido): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(Market): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(MockFxPriceOracle): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(PlatformFeeSpliter): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(RebalancePool): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(RebalancePoolRegistry): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(RebalancePoolSplitter): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(RebalanceWithBonusToken__0): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(RebalanceWithBonusToken__1): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(RebalanceWithBonusToken__2): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(ReservePool): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(SmartWalletWhitelist): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(StETHAndxETHWrapper): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(stETHTreasury): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(Token_Minter): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(Voting_Escrow): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(WstETH): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(wstETHWrapper): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(xHolderRedeemer): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getBoostRatio(xMinter): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.getHistoricalRewardTokens: []
  BoostableRebalancePool__1.lastAssetLossError: '0.0 # {unit:ether}'
  BoostableRebalancePool__1.liquidatableCollateralRatio: '1.3055 # {unit:ether}'
  BoostableRebalancePool__1.market: Market
  BoostableRebalancePool__1.minter: Token_Minter
  BoostableRebalancePool__1.numTotalSupplyHistory: '149 # {}'
  BoostableRebalancePool__1.pendingRewards($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(admin).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(admin).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(BoostableRebalancePool__0).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(BoostableRebalancePool__0).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Booster).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Booster).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Curve_DAO_Token).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Curve_DAO_Token).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(fHolderLiquidator).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(fHolderLiquidator).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(fHolderRedeemer).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(fHolderRedeemer).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(fMinter).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(fMinter).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(FractionalToken).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(FractionalToken).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(FxnDepositor).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(FxnDepositor).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(FxnVoterProxy).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(FxnVoterProxy).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Gauge_Controller).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Gauge_Controller).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(GnosisSafe__0).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(GnosisSafe__0).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(GnosisSafe__1).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(GnosisSafe__1).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(LeveragedToken).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(LeveragedToken).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Lido).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Lido).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Market).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Market).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(MockFxPriceOracle).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(MockFxPriceOracle).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(PlatformFeeSpliter).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(PlatformFeeSpliter).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalancePool).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalancePool).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalancePoolRegistry).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalancePoolRegistry).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalancePoolSplitter).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalancePoolSplitter).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalanceWithBonusToken__0).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalanceWithBonusToken__0).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalanceWithBonusToken__1).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalanceWithBonusToken__1).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalanceWithBonusToken__2).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(RebalanceWithBonusToken__2).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(ReservePool).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(ReservePool).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(SmartWalletWhitelist).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(SmartWalletWhitelist).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(StETHAndxETHWrapper).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(StETHAndxETHWrapper).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(stETHTreasury).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(stETHTreasury).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Token_Minter).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Token_Minter).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Voting_Escrow).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(Voting_Escrow).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(WstETH).0: '0.140 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(WstETH).1: '1.201 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(wstETHWrapper).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(wstETHWrapper).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(xHolderRedeemer).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(xHolderRedeemer).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(xMinter).0: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.pendingRewards(xMinter).1: '0.0 # {unit:ether,precision:3}'
  BoostableRebalancePool__1.periodLength: '604800'
  BoostableRebalancePool__1.rewardData($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).finishAt: '0'
  BoostableRebalancePool__1.rewardData($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).queued: '0'
  BoostableRebalancePool__1.rewardData($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).rate: '0'
  BoostableRebalancePool__1.rewardData(admin).finishAt: '0'
  BoostableRebalancePool__1.rewardData(admin).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(admin).queued: '0'
  BoostableRebalancePool__1.rewardData(admin).rate: '0'
  BoostableRebalancePool__1.rewardData(BoostableRebalancePool__0).finishAt: '0'
  BoostableRebalancePool__1.rewardData(BoostableRebalancePool__0).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(BoostableRebalancePool__0).queued: '0'
  BoostableRebalancePool__1.rewardData(BoostableRebalancePool__0).rate: '0'
  BoostableRebalancePool__1.rewardData(Booster).finishAt: '0'
  BoostableRebalancePool__1.rewardData(Booster).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(Booster).queued: '0'
  BoostableRebalancePool__1.rewardData(Booster).rate: '0'
  BoostableRebalancePool__1.rewardData(Curve_DAO_Token).finishAt: '0'
  BoostableRebalancePool__1.rewardData(Curve_DAO_Token).lastUpdate: '1707654215'
  BoostableRebalancePool__1.rewardData(Curve_DAO_Token).queued: '0'
  BoostableRebalancePool__1.rewardData(Curve_DAO_Token).rate: '0'
  BoostableRebalancePool__1.rewardData(fHolderLiquidator).finishAt: '0'
  BoostableRebalancePool__1.rewardData(fHolderLiquidator).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(fHolderLiquidator).queued: '0'
  BoostableRebalancePool__1.rewardData(fHolderLiquidator).rate: '0'
  BoostableRebalancePool__1.rewardData(fHolderRedeemer).finishAt: '0'
  BoostableRebalancePool__1.rewardData(fHolderRedeemer).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(fHolderRedeemer).queued: '0'
  BoostableRebalancePool__1.rewardData(fHolderRedeemer).rate: '0'
  BoostableRebalancePool__1.rewardData(fMinter).finishAt: '0'
  BoostableRebalancePool__1.rewardData(fMinter).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(fMinter).queued: '0'
  BoostableRebalancePool__1.rewardData(fMinter).rate: '0'
  BoostableRebalancePool__1.rewardData(FractionalToken).finishAt: '0'
  BoostableRebalancePool__1.rewardData(FractionalToken).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(FractionalToken).queued: '0'
  BoostableRebalancePool__1.rewardData(FractionalToken).rate: '0'
  BoostableRebalancePool__1.rewardData(FxnDepositor).finishAt: '0'
  BoostableRebalancePool__1.rewardData(FxnDepositor).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(FxnDepositor).queued: '0'
  BoostableRebalancePool__1.rewardData(FxnDepositor).rate: '0'
  BoostableRebalancePool__1.rewardData(FxnVoterProxy).finishAt: '0'
  BoostableRebalancePool__1.rewardData(FxnVoterProxy).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(FxnVoterProxy).queued: '0'
  BoostableRebalancePool__1.rewardData(FxnVoterProxy).rate: '0'
  BoostableRebalancePool__1.rewardData(Gauge_Controller).finishAt: '0'
  BoostableRebalancePool__1.rewardData(Gauge_Controller).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(Gauge_Controller).queued: '0'
  BoostableRebalancePool__1.rewardData(Gauge_Controller).rate: '0'
  BoostableRebalancePool__1.rewardData(GnosisSafe__0).finishAt: '0'
  BoostableRebalancePool__1.rewardData(GnosisSafe__0).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(GnosisSafe__0).queued: '0'
  BoostableRebalancePool__1.rewardData(GnosisSafe__0).rate: '0'
  BoostableRebalancePool__1.rewardData(GnosisSafe__1).finishAt: '0'
  BoostableRebalancePool__1.rewardData(GnosisSafe__1).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(GnosisSafe__1).queued: '0'
  BoostableRebalancePool__1.rewardData(GnosisSafe__1).rate: '0'
  BoostableRebalancePool__1.rewardData(LeveragedToken).finishAt: '0'
  BoostableRebalancePool__1.rewardData(LeveragedToken).lastUpdate: '1707654215'
  BoostableRebalancePool__1.rewardData(LeveragedToken).queued: '0'
  BoostableRebalancePool__1.rewardData(LeveragedToken).rate: '0'
  BoostableRebalancePool__1.rewardData(Lido).finishAt: '0'
  BoostableRebalancePool__1.rewardData(Lido).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(Lido).queued: '0'
  BoostableRebalancePool__1.rewardData(Lido).rate: '0'
  BoostableRebalancePool__1.rewardData(Market).finishAt: '0'
  BoostableRebalancePool__1.rewardData(Market).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(Market).queued: '0'
  BoostableRebalancePool__1.rewardData(Market).rate: '0'
  BoostableRebalancePool__1.rewardData(MockFxPriceOracle).finishAt: '0'
  BoostableRebalancePool__1.rewardData(MockFxPriceOracle).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(MockFxPriceOracle).queued: '0'
  BoostableRebalancePool__1.rewardData(MockFxPriceOracle).rate: '0'
  BoostableRebalancePool__1.rewardData(PlatformFeeSpliter).finishAt: '0'
  BoostableRebalancePool__1.rewardData(PlatformFeeSpliter).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(PlatformFeeSpliter).queued: '0'
  BoostableRebalancePool__1.rewardData(PlatformFeeSpliter).rate: '0'
  BoostableRebalancePool__1.rewardData(RebalancePool).finishAt: '0'
  BoostableRebalancePool__1.rewardData(RebalancePool).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(RebalancePool).queued: '0'
  BoostableRebalancePool__1.rewardData(RebalancePool).rate: '0'
  BoostableRebalancePool__1.rewardData(RebalancePoolRegistry).finishAt: '0'
  BoostableRebalancePool__1.rewardData(RebalancePoolRegistry).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(RebalancePoolRegistry).queued: '0'
  BoostableRebalancePool__1.rewardData(RebalancePoolRegistry).rate: '0'
  BoostableRebalancePool__1.rewardData(RebalancePoolSplitter).finishAt: '0'
  BoostableRebalancePool__1.rewardData(RebalancePoolSplitter).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(RebalancePoolSplitter).queued: '0'
  BoostableRebalancePool__1.rewardData(RebalancePoolSplitter).rate: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__0).finishAt: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__0).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__0).queued: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__0).rate: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__1).finishAt: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__1).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__1).queued: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__1).rate: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__2).finishAt: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__2).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__2).queued: '0'
  BoostableRebalancePool__1.rewardData(RebalanceWithBonusToken__2).rate: '0'
  BoostableRebalancePool__1.rewardData(ReservePool).finishAt: '0'
  BoostableRebalancePool__1.rewardData(ReservePool).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(ReservePool).queued: '0'
  BoostableRebalancePool__1.rewardData(ReservePool).rate: '0'
  BoostableRebalancePool__1.rewardData(SmartWalletWhitelist).finishAt: '0'
  BoostableRebalancePool__1.rewardData(SmartWalletWhitelist).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(SmartWalletWhitelist).queued: '0'
  BoostableRebalancePool__1.rewardData(SmartWalletWhitelist).rate: '0'
  BoostableRebalancePool__1.rewardData(StETHAndxETHWrapper).finishAt: '0'
  BoostableRebalancePool__1.rewardData(StETHAndxETHWrapper).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(StETHAndxETHWrapper).queued: '0'
  BoostableRebalancePool__1.rewardData(StETHAndxETHWrapper).rate: '0'
  BoostableRebalancePool__1.rewardData(stETHTreasury).finishAt: '0'
  BoostableRebalancePool__1.rewardData(stETHTreasury).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(stETHTreasury).queued: '0'
  BoostableRebalancePool__1.rewardData(stETHTreasury).rate: '0'
  BoostableRebalancePool__1.rewardData(Token_Minter).finishAt: '0'
  BoostableRebalancePool__1.rewardData(Token_Minter).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(Token_Minter).queued: '0'
  BoostableRebalancePool__1.rewardData(Token_Minter).rate: '0'
  BoostableRebalancePool__1.rewardData(Voting_Escrow).finishAt: '0'
  BoostableRebalancePool__1.rewardData(Voting_Escrow).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(Voting_Escrow).queued: '0'
  BoostableRebalancePool__1.rewardData(Voting_Escrow).rate: '0'
  BoostableRebalancePool__1.rewardData(WstETH).finishAt: '1708259015'
  BoostableRebalancePool__1.rewardData(WstETH).lastUpdate: '1707654215'
  BoostableRebalancePool__1.rewardData(WstETH).queued: '492028'
  BoostableRebalancePool__1.rewardData(WstETH).rate: '2217091562984'
  BoostableRebalancePool__1.rewardData(wstETHWrapper).finishAt: '0'
  BoostableRebalancePool__1.rewardData(wstETHWrapper).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(wstETHWrapper).queued: '0'
  BoostableRebalancePool__1.rewardData(wstETHWrapper).rate: '0'
  BoostableRebalancePool__1.rewardData(xHolderRedeemer).finishAt: '0'
  BoostableRebalancePool__1.rewardData(xHolderRedeemer).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(xHolderRedeemer).queued: '0'
  BoostableRebalancePool__1.rewardData(xHolderRedeemer).rate: '0'
  BoostableRebalancePool__1.rewardData(xMinter).finishAt: '0'
  BoostableRebalancePool__1.rewardData(xMinter).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(xMinter).queued: '0'
  BoostableRebalancePool__1.rewardData(xMinter).rate: '0'
  BoostableRebalancePool__1.rewardReceiver($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(admin): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(BoostableRebalancePool__0): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(Booster): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(Curve_DAO_Token): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(fHolderLiquidator): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(fHolderRedeemer): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(fMinter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(FractionalToken): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(FxnDepositor): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(FxnVoterProxy): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(Gauge_Controller): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(GnosisSafe__0): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(GnosisSafe__1): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(LeveragedToken): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(Lido): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(Market): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(PlatformFeeSpliter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(RebalancePool): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(RebalancePoolRegistry): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(RebalancePoolSplitter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(RebalanceWithBonusToken__0): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(RebalanceWithBonusToken__1): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(RebalanceWithBonusToken__2): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(ReservePool): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(SmartWalletWhitelist): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(StETHAndxETHWrapper): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(stETHTreasury): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(Token_Minter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(Voting_Escrow): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(WstETH): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(wstETHWrapper): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(xHolderRedeemer): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.rewardReceiver(xMinter): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.totalSupply: '5769148 # {precision:0,unit:ether}'
  BoostableRebalancePool__1.treasury: stETHTreasury
  BoostableRebalancePool__1.ve: Voting_Escrow
  BoostableRebalancePool__1.wrapper: StETHAndxETHWrapper
  Booster.cvxfxn: '0x183395DbD0B5e93323a7286D1973150697FFFCB3'
  Booster.feeclaimer: '0x0000000000000000000000000000000000000000'
  Booster.feeDistro: '0xd116513EEa4Efe3908212AfBAeFC76cb29245681'
  Booster.feeQueue: '0x30575fDCFb2b76096047F0a8651b52159aB835f7'
  Booster.feeToken: WstETH
  Booster.fxn: Curve_DAO_Token
  Booster.fxnDepositor: FxnDepositor
  Booster.owner: GnosisSafe__1
  Booster.pendingOwner: '0x0000000000000000000000000000000000000000'
  Booster.proxy: FxnVoterProxy
  Booster.rewardManager: '0xe7Ac460137CCD6173DB6992529013D672d4F0087'
  Curve_DAO_Token.admin: GnosisSafe__0
  Curve_DAO_Token.available_supply: '1059378 # {precision:0,unit:ether}'
  Curve_DAO_Token.balanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(admin): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(BoostableRebalancePool__0): '20.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(BoostableRebalancePool__1): '20.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(Booster): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(fHolderLiquidator): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(fHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(fMinter): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(FractionalToken): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(FxnDepositor): '1397.71 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(FxnVoterProxy): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(Gauge_Controller): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(GnosisSafe__0): '7119.92 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(GnosisSafe__1): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(LeveragedToken): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(Lido): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(Market): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(PlatformFeeSpliter): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(RebalancePool): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(RebalancePoolRegistry): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(RebalancePoolSplitter): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(RebalanceWithBonusToken__0): '100.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(RebalanceWithBonusToken__1): '20.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(RebalanceWithBonusToken__2): '20.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(ReservePool): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(SmartWalletWhitelist): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(StETHAndxETHWrapper): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(stETHTreasury): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(Token_Minter): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(Voting_Escrow): '119837.44 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(WstETH): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(wstETHWrapper): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(xHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.balanceOf(xMinter): '0.0 # {unit:ether,precision:2}'
  Curve_DAO_Token.decimals: '18 # {}'
  Curve_DAO_Token.INITIAL_RATE: '0.003107559614408929 # {unit:ether}'
  Curve_DAO_Token.mining_epoch: '0'
  Curve_DAO_Token.minter: Token_Minter
  Curve_DAO_Token.rate: '0.003107559614408929 # {unit:ether}'
  Curve_DAO_Token.RATE_REDUCTION_COEFFICIENT: '1.111111111111111111 # {unit:ether}'
  Curve_DAO_Token.start_epoch_time: '1695045779 # {}'
  Curve_DAO_Token.totalSupply: '1020000 # {precision:0,unit:ether}'
  FractionalToken.balanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '16.49 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(admin): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(BoostableRebalancePool__0): '5688690.99 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(BoostableRebalancePool__1): '5769148.34 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(Booster): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(Curve_DAO_Token): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(fHolderLiquidator): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(fHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(fMinter): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(FxnDepositor): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(FxnVoterProxy): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(Gauge_Controller): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(GnosisSafe__0): '9802.39 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(GnosisSafe__1): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(LeveragedToken): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(Lido): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(Market): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(PlatformFeeSpliter): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(RebalancePool): '33956.49 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(RebalancePoolRegistry): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(RebalancePoolSplitter): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(RebalanceWithBonusToken__0): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(RebalanceWithBonusToken__1): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(RebalanceWithBonusToken__2): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(ReservePool): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(SmartWalletWhitelist): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(StETHAndxETHWrapper): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(stETHTreasury): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(Token_Minter): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(Voting_Escrow): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(WstETH): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(wstETHWrapper): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(xHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(xMinter): '0.0 # {unit:ether,precision:2}'
  FractionalToken.decimals: '18 # {}'
  FractionalToken.nav: '1.0 # {unit:ether}'
  FractionalToken.totalSupply: '12136955 # {precision:0,unit:ether}'
  FractionalToken.treasury: stETHTreasury
  FxnDepositor.DENOMINATOR: '0.00000000000001 # {unit:ether}'
  FxnDepositor.escrow: Voting_Escrow
  FxnDepositor.fxn: Curve_DAO_Token
  FxnDepositor.minter: '0x183395DbD0B5e93323a7286D1973150697FFFCB3'
  FxnDepositor.owner: '0xe7Ac460137CCD6173DB6992529013D672d4F0087'
  FxnDepositor.pendingOwner: '0x0000000000000000000000000000000000000000'
  FxnDepositor.platformDeposit: '0x1389388d01708118b497f59521f6943Be2541bb7'
  FxnDepositor.platformHolding: '0.000000000000002 # {unit:ether}'
  FxnDepositor.staker: FxnVoterProxy
  FxnDepositor.unlockTime: '0.0000000018319392 # {unit:ether}'
  FxnVoterProxy.depositor: FxnDepositor
  FxnVoterProxy.escrow: Voting_Escrow
  FxnVoterProxy.fxn: Curve_DAO_Token
  FxnVoterProxy.operator: Booster
  FxnVoterProxy.owner: GnosisSafe__1
  FxnVoterProxy.pendingOwner: '0x0000000000000000000000000000000000000000'
  Gauge_Controller.admin: GnosisSafe__0
  Gauge_Controller.future_admin: '0x0000000000000000000000000000000000000000'
  Gauge_Controller.gauge_relative_weight($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(admin): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(BoostableRebalancePool__0): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(BoostableRebalancePool__1): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(Booster): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(Curve_DAO_Token): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(fHolderLiquidator): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(fHolderRedeemer): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(fMinter): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(FractionalToken): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(FxnDepositor): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(FxnVoterProxy): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(GnosisSafe__0): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(GnosisSafe__1): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(LeveragedToken): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(Lido): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(Market): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(MockFxPriceOracle): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(PlatformFeeSpliter): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(RebalancePool): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(RebalancePoolRegistry): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(RebalancePoolSplitter): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(RebalanceWithBonusToken__0): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(RebalanceWithBonusToken__1): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(RebalanceWithBonusToken__2): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(ReservePool): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(SmartWalletWhitelist): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(StETHAndxETHWrapper): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(stETHTreasury): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(Token_Minter): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(Voting_Escrow): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(WstETH): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(wstETHWrapper): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(xHolderRedeemer): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_relative_weight(xMinter): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_types($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(admin): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(BoostableRebalancePool__0): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(BoostableRebalancePool__1): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(Booster): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(Curve_DAO_Token): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(fHolderLiquidator): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(fHolderRedeemer): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(fMinter): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(FractionalToken): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(FxnDepositor): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(FxnVoterProxy): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(GnosisSafe__0): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(GnosisSafe__1): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(LeveragedToken): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(Lido): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(Market): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(MockFxPriceOracle): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(PlatformFeeSpliter): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(RebalancePool): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(RebalancePoolRegistry): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(RebalancePoolSplitter): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(RebalanceWithBonusToken__0): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(RebalanceWithBonusToken__1): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(RebalanceWithBonusToken__2): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(ReservePool): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(SmartWalletWhitelist): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(StETHAndxETHWrapper): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(stETHTreasury): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(Token_Minter): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(Voting_Escrow): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(WstETH): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(wstETHWrapper): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(xHolderRedeemer): Transaction reverted without a reason string
  Gauge_Controller.gauge_types(xMinter): Transaction reverted without a reason string
  Gauge_Controller.get_gauge_weight($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(admin): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(BoostableRebalancePool__0): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(BoostableRebalancePool__1): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(Booster): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(Curve_DAO_Token): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(fHolderLiquidator): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(fHolderRedeemer): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(fMinter): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(FractionalToken): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(FxnDepositor): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(FxnVoterProxy): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(GnosisSafe__0): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(GnosisSafe__1): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(LeveragedToken): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(Lido): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(Market): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(MockFxPriceOracle): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(PlatformFeeSpliter): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(RebalancePool): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(RebalancePoolRegistry): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(RebalancePoolSplitter): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(RebalanceWithBonusToken__0): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(RebalanceWithBonusToken__1): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(RebalanceWithBonusToken__2): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(ReservePool): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(SmartWalletWhitelist): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(StETHAndxETHWrapper): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(stETHTreasury): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(Token_Minter): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(Voting_Escrow): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(WstETH): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(wstETHWrapper): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(xHolderRedeemer): '0.0 # {unit:ether}'
  Gauge_Controller.get_gauge_weight(xMinter): '0.0 # {unit:ether}'
  Gauge_Controller.get_total_weight: '0.0 # {unit:ether}'
  Gauge_Controller.n_gauge_types: '0'
  Gauge_Controller.n_gauges: '0'
  Gauge_Controller.time_total: '1694649600 # {}'
  Gauge_Controller.time_weight($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(admin): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(BoostableRebalancePool__0): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(BoostableRebalancePool__1): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(Booster): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(Curve_DAO_Token): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(fHolderLiquidator): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(fHolderRedeemer): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(fMinter): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(FractionalToken): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(FxnDepositor): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(FxnVoterProxy): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(GnosisSafe__0): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(GnosisSafe__1): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(LeveragedToken): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(Lido): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(Market): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(MockFxPriceOracle): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(PlatformFeeSpliter): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(RebalancePool): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(RebalancePoolRegistry): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(RebalancePoolSplitter): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(RebalanceWithBonusToken__0): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(RebalanceWithBonusToken__1): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(RebalanceWithBonusToken__2): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(ReservePool): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(SmartWalletWhitelist): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(StETHAndxETHWrapper): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(stETHTreasury): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(Token_Minter): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(Voting_Escrow): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(WstETH): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(wstETHWrapper): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(xHolderRedeemer): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(xMinter): '0.0 # {unit:ether}'
  Gauge_Controller.token: Curve_DAO_Token
  Gauge_Controller.vote_user_power($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(admin): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(BoostableRebalancePool__0): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(BoostableRebalancePool__1): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(Booster): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(Curve_DAO_Token): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(fHolderLiquidator): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(fHolderRedeemer): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(fMinter): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(FractionalToken): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(FxnDepositor): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(FxnVoterProxy): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(GnosisSafe__0): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(GnosisSafe__1): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(LeveragedToken): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(Lido): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(Market): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(MockFxPriceOracle): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(PlatformFeeSpliter): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(RebalancePool): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(RebalancePoolRegistry): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(RebalancePoolSplitter): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(RebalanceWithBonusToken__0): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(RebalanceWithBonusToken__1): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(RebalanceWithBonusToken__2): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(ReservePool): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(SmartWalletWhitelist): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(StETHAndxETHWrapper): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(stETHTreasury): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(Token_Minter): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(Voting_Escrow): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(WstETH): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(wstETHWrapper): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(xHolderRedeemer): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(xMinter): '0.0 # {unit:ether}'
  Gauge_Controller.voting_escrow: Voting_Escrow
  GnosisSafe__0.getChainId: '31337 # {}'
  GnosisSafe__0.getOwners:
    - '0x38a93e70b0D8343657f802C1c3Fdb06aC8F8fe99'
    - '0xF483De0f306952FA56ef56c1dbBDd2A70737bDd5'
    - '0xe3522d85d37F55735e9327CD7a5cDe3abaf28E03'
    - '0x74390470F4001Ca85D93bD546A4Ab1724359654B'
    - '0xeF0Ca09fbf9a5f61E657Fb208b46b8685c1d4766'
    - '0x8EcAB7B8ed8215cA52500cbf1548B9239173ef82'
    - '0x4088421cBDBa1501d8Fd09fD241717097Afb42Cb'
    - '0xcdF067F306E7a511Ef701588AFCdcff292B19282'
    - '0x7904Ad7c992CDAb500dAa0f3366301b1f5365B62'
  GnosisSafe__0.getThreshold: '6 # {}'
  GnosisSafe__0.nonce: '58 # {}'
  GnosisSafe__1.getModules: []
  GnosisSafe__1.getOwners:
    - '0x49e5097f627e400F2a377D5FD7E712d1E0e16FC2'
    - '0x17e06ce6914E3969f7BD37D8b2a563890cA1c96e'
    - '0xAdE9e51C9E23d64E538A7A38656B78aB6Bcc349e'
    - '0xAAc0aa431c237C2C0B5f041c8e59B3f1a43aC78F'
    - '0x7904Ad7c992CDAb500dAa0f3366301b1f5365B62'
  GnosisSafe__1.getThreshold: '3 # {}'
  GnosisSafe__1.nonce: '1007 # {}'
  LeveragedToken.balanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '21.99 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(admin): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(BoostableRebalancePool__0): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(BoostableRebalancePool__1): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(Booster): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(Curve_DAO_Token): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(fHolderLiquidator): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(fHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(fMinter): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(FractionalToken): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(FxnDepositor): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(FxnVoterProxy): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(Gauge_Controller): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(GnosisSafe__0): '217352.17 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(GnosisSafe__1): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(Lido): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(Market): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(PlatformFeeSpliter): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(RebalancePool): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(RebalancePoolRegistry): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(RebalancePoolSplitter): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(RebalanceWithBonusToken__0): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(RebalanceWithBonusToken__1): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(RebalanceWithBonusToken__2): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(ReservePool): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(SmartWalletWhitelist): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(StETHAndxETHWrapper): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(stETHTreasury): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(Token_Minter): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(Voting_Escrow): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(WstETH): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(wstETHWrapper): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(xHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.balanceOf(xMinter): '0.0 # {unit:ether,precision:2}'
  LeveragedToken.decimals: '18 # {}'
  LeveragedToken.fToken: FractionalToken
  LeveragedToken.nav: '0.723751949545094451 # {unit:ether}'
  LeveragedToken.totalSupply: '7200159 # {precision:0,unit:ether}'
  LeveragedToken.treasury: stETHTreasury
  Lido.balanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.08 # {unit:ether,precision:2}'
  Lido.balanceOf(admin): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(BoostableRebalancePool__0): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(BoostableRebalancePool__1): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(Booster): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(Curve_DAO_Token): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(fHolderLiquidator): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(fHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(fMinter): '10000.00 # {unit:ether,precision:2}'
  Lido.balanceOf(FractionalToken): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(FxnDepositor): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(FxnVoterProxy): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(Gauge_Controller): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(GnosisSafe__0): '0.12 # {unit:ether,precision:2}'
  Lido.balanceOf(GnosisSafe__1): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(LeveragedToken): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(Market): '0.00 # {unit:ether,precision:2}'
  Lido.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(PlatformFeeSpliter): '5.20 # {unit:ether,precision:2}'
  Lido.balanceOf(RebalancePool): '2.84 # {unit:ether,precision:2}'
  Lido.balanceOf(RebalancePoolRegistry): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(RebalancePoolSplitter): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(RebalanceWithBonusToken__0): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(RebalanceWithBonusToken__1): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(RebalanceWithBonusToken__2): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(ReservePool): '33.53 # {unit:ether,precision:2}'
  Lido.balanceOf(SmartWalletWhitelist): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(StETHAndxETHWrapper): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(stETHTreasury): '9444.81 # {unit:ether,precision:2}'
  Lido.balanceOf(Token_Minter): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(Voting_Escrow): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(WstETH): '3548193.50 # {unit:ether,precision:2}'
  Lido.balanceOf(wstETHWrapper): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(xHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(xMinter): '0.0 # {unit:ether,precision:2}'
  Lido.decimals: '18 # {}'
  Lido.eip712Domain.chainId: '0.000000000000031337 # {unit:ether}'
  Lido.eip712Domain.verifyingContract: Lido
  Lido.getBeaconStat.beaconBalance: '9609517.707248935 # {unit:ether}'
  Lido.getBeaconStat.beaconValidators: '0.00000000000032914 # {unit:ether}'
  Lido.getBeaconStat.depositedValidators: '0.000000000000329449 # {unit:ether}'
  Lido.getBufferedEther: '5317.034030923591218678 # {unit:ether}'
  Lido.getContractVersion: '0.000000000000000002 # {unit:ether}'
  Lido.getCurrentStakeLimit: '150000.0 # {unit:ether}'
  Lido.getDepositableEther: '0.0 # {unit:ether}'
  Lido.getEIP712StETH: '0x8F73e4C2A6D852bb4ab2A45E6a9CF5715b3228B7'
  Lido.getEVMScriptRegistry: '0x853cc0D5917f49B57B8e9F89e491F5E18919093A'
  Lido.getFee: '1000'
  Lido.getFeeDistribution.insuranceFeeBasisPoints: '0'
  Lido.getFeeDistribution.operatorsFeeBasisPoints: '5000'
  Lido.getFeeDistribution.treasuryFeeBasisPoints: '5000'
  Lido.getInitializationBlock: '0.000000000011473216 # {unit:ether}'
  Lido.getLidoLocator: '0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb'
  Lido.getOracle: '0x442af784A788A5bd6F42A01Ebe9F287a871243fb'
  Lido.getRecoveryVault: '0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c'
  Lido.getStakeLimitFullInfo.currentStakeLimit: '150000.0 # {unit:ether}'
  Lido.getStakeLimitFullInfo.maxStakeLimit: '150000.0 # {unit:ether}'
  Lido.getStakeLimitFullInfo.maxStakeLimitGrowthBlocks: '0.0000000000000064 # {unit:ether}'
  Lido.getStakeLimitFullInfo.prevStakeBlockNumber: '0.000000000019209999 # {unit:ether}'
  Lido.getStakeLimitFullInfo.prevStakeLimit: '149999.691 # {unit:ether}'
  Lido.getTotalELRewardsCollected: '139179.302573740159056574 # {unit:ether}'
  Lido.getTotalPooledEther: '9624722.741279858591218678 # {unit:ether}'
  Lido.getTotalShares: '8320475.448872065470959815 # {unit:ether}'
  Lido.getTreasury: '0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c'
  Lido.kernel: '0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc'
  Lido.nonces($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0 # {}'
  Lido.nonces(admin): '0 # {}'
  Lido.nonces(BoostableRebalancePool__0): '0 # {}'
  Lido.nonces(BoostableRebalancePool__1): '0 # {}'
  Lido.nonces(Booster): '0 # {}'
  Lido.nonces(Curve_DAO_Token): '0 # {}'
  Lido.nonces(fHolderLiquidator): '0 # {}'
  Lido.nonces(fHolderRedeemer): '0 # {}'
  Lido.nonces(fMinter): '0 # {}'
  Lido.nonces(FractionalToken): '0 # {}'
  Lido.nonces(FxnDepositor): '0 # {}'
  Lido.nonces(FxnVoterProxy): '0 # {}'
  Lido.nonces(Gauge_Controller): '0 # {}'
  Lido.nonces(GnosisSafe__0): '0 # {}'
  Lido.nonces(GnosisSafe__1): '0 # {}'
  Lido.nonces(LeveragedToken): '0 # {}'
  Lido.nonces(Market): '0 # {}'
  Lido.nonces(MockFxPriceOracle): '0 # {}'
  Lido.nonces(PlatformFeeSpliter): '0 # {}'
  Lido.nonces(RebalancePool): '0 # {}'
  Lido.nonces(RebalancePoolRegistry): '0 # {}'
  Lido.nonces(RebalancePoolSplitter): '0 # {}'
  Lido.nonces(RebalanceWithBonusToken__0): '0 # {}'
  Lido.nonces(RebalanceWithBonusToken__1): '0 # {}'
  Lido.nonces(RebalanceWithBonusToken__2): '0 # {}'
  Lido.nonces(ReservePool): '0 # {}'
  Lido.nonces(SmartWalletWhitelist): '0 # {}'
  Lido.nonces(StETHAndxETHWrapper): '0 # {}'
  Lido.nonces(stETHTreasury): '0 # {}'
  Lido.nonces(Token_Minter): '0 # {}'
  Lido.nonces(Voting_Escrow): '0 # {}'
  Lido.nonces(WstETH): '0 # {}'
  Lido.nonces(wstETHWrapper): '0 # {}'
  Lido.nonces(xHolderRedeemer): '0 # {}'
  Lido.nonces(xMinter): '0 # {}'
  Lido.sharesOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.067576111815704987 # {unit:ether}'
  Lido.sharesOf(admin): '0.0 # {unit:ether}'
  Lido.sharesOf(BoostableRebalancePool__0): '0.0 # {unit:ether}'
  Lido.sharesOf(BoostableRebalancePool__1): '0.0 # {unit:ether}'
  Lido.sharesOf(Booster): '0.0 # {unit:ether}'
  Lido.sharesOf(Curve_DAO_Token): '0.0 # {unit:ether}'
  Lido.sharesOf(fHolderLiquidator): '0.0 # {unit:ether}'
  Lido.sharesOf(fHolderRedeemer): '0.0 # {unit:ether}'
  Lido.sharesOf(fMinter): '8644.89884283735810299 # {unit:ether}'
  Lido.sharesOf(FractionalToken): '0.0 # {unit:ether}'
  Lido.sharesOf(FxnDepositor): '0.0 # {unit:ether}'
  Lido.sharesOf(FxnVoterProxy): '0.0 # {unit:ether}'
  Lido.sharesOf(Gauge_Controller): '0.0 # {unit:ether}'
  Lido.sharesOf(GnosisSafe__0): '0.103633390821223128 # {unit:ether}'
  Lido.sharesOf(GnosisSafe__1): '0.0 # {unit:ether}'
  Lido.sharesOf(LeveragedToken): '0.0 # {unit:ether}'
  Lido.sharesOf(Market): '0.000000000000000223 # {unit:ether}'
  Lido.sharesOf(MockFxPriceOracle): '0.0 # {unit:ether}'
  Lido.sharesOf(PlatformFeeSpliter): '4.49353245346764438 # {unit:ether}'
  Lido.sharesOf(RebalancePool): '2.451394756103965692 # {unit:ether}'
  Lido.sharesOf(RebalancePoolRegistry): '0.0 # {unit:ether}'
  Lido.sharesOf(RebalancePoolSplitter): '0.0 # {unit:ether}'
  Lido.sharesOf(RebalanceWithBonusToken__0): '0.0 # {unit:ether}'
  Lido.sharesOf(RebalanceWithBonusToken__1): '0.0 # {unit:ether}'
  Lido.sharesOf(RebalanceWithBonusToken__2): '0.0 # {unit:ether}'
  Lido.sharesOf(ReservePool): '28.990166673141510048 # {unit:ether}'
  Lido.sharesOf(SmartWalletWhitelist): '0.0 # {unit:ether}'
  Lido.sharesOf(StETHAndxETHWrapper): '0.0 # {unit:ether}'
  Lido.sharesOf(stETHTreasury): '8164.940765030775329617 # {unit:ether}'
  Lido.sharesOf(Token_Minter): '0.0 # {unit:ether}'
  Lido.sharesOf(Voting_Escrow): '0.0 # {unit:ether}'
  Lido.sharesOf(WstETH): '3067377.387249938650363244 # {unit:ether}'
  Lido.sharesOf(wstETHWrapper): '0.0 # {unit:ether}'
  Lido.sharesOf(xHolderRedeemer): '0.0 # {unit:ether}'
  Lido.sharesOf(xMinter): '0.0 # {unit:ether}'
  Lido.totalSupply: '9624723 # {precision:0,unit:ether}'
  Market.baseToken: Lido
  Market.fToken: FractionalToken
  Market.fTokenMintFeeRatio.defaultFeeRatio: '0.25 # {unit:16}'
  Market.fTokenMintFeeRatio.extraFeeRatio: '0.0 # {unit:16}'
  Market.fTokenRedeemFeeRatio.defaultFeeRatio: '0.25 # {unit:16}'
  Market.fTokenRedeemFeeRatio.extraFeeRatio: '-0.25 # {unit:16}'
  Market.incentiveConfig.liquidationIncentiveRatio: '0.0 # {unit:18}'
  Market.incentiveConfig.selfLiquidationIncentiveRatio: '0.0 # {unit:18}'
  Market.incentiveConfig.stabilityIncentiveRatio: '0.0 # {unit:18}'
  Market.marketConfig.liquidationRatio: '1.2067 # {unit:18}'
  Market.marketConfig.recapRatio: '1.0 # {unit:18}'
  Market.marketConfig.selfLiquidationRatio: '1.1439 # {unit:18}'
  Market.marketConfig.stabilityRatio: '1.3055 # {unit:18}'
  Market.platform: PlatformFeeSpliter
  Market.registry: RebalancePoolRegistry
  Market.reservePool: ReservePool
  Market.treasury: stETHTreasury
  Market.xToken: LeveragedToken
  Market.xTokenMintFeeRatio.defaultFeeRatio: '1.0 # {unit:16}'
  Market.xTokenMintFeeRatio.extraFeeRatio: '-1.0 # {unit:16}'
  Market.xTokenRedeemFeeRatio.defaultFeeRatio: '1.0 # {unit:16}'
  Market.xTokenRedeemFeeRatio.extraFeeRatio: '7.0 # {unit:16}'
  MockFxPriceOracle.getPrice._maxUnsafePrice: '2500.9 # {unit:ether,precision:1}'
  MockFxPriceOracle.getPrice._minUnsafePrice: '2500.9 # {unit:ether,precision:1}'
  MockFxPriceOracle.getPrice._safePrice: '2500.9 # {unit:ether,precision:1}'
  MockFxPriceOracle.price: '2500.9 # {unit:ether,precision:1}'
  PlatformFeeSpliter.burners($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(admin): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(BoostableRebalancePool__0): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(BoostableRebalancePool__1): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(Booster): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(Curve_DAO_Token): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(fHolderLiquidator): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(fHolderRedeemer): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(fMinter): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(FractionalToken): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(FxnDepositor): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(FxnVoterProxy): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(Gauge_Controller): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(GnosisSafe__0): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(GnosisSafe__1): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(LeveragedToken): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(Lido): '0x6440e21A3634C319c69CEf8d17601DBC4E97C3dB'
  PlatformFeeSpliter.burners(Market): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(RebalancePool): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(RebalancePoolRegistry): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(RebalancePoolSplitter): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(RebalanceWithBonusToken__0): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(RebalanceWithBonusToken__1): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(RebalanceWithBonusToken__2): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(ReservePool): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(SmartWalletWhitelist): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(StETHAndxETHWrapper): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(stETHTreasury): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(Token_Minter): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(Voting_Escrow): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(WstETH): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(wstETHWrapper): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(xHolderRedeemer): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.burners(xMinter): '0x0000000000000000000000000000000000000000'
  PlatformFeeSpliter.ecosystem: GnosisSafe__0
  PlatformFeeSpliter.getRewardCount: '1 # {}'
  PlatformFeeSpliter.owner: GnosisSafe__0
  PlatformFeeSpliter.staker: $0x11E91BB6d1334585AA37D8F4fde3932C7960B938
  PlatformFeeSpliter.treasury: ReservePool
  RebalancePool.asset: FractionalToken
  RebalancePool.balanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(admin): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(BoostableRebalancePool__0): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(BoostableRebalancePool__1): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(Booster): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(Curve_DAO_Token): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(fHolderLiquidator): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(fHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(fMinter): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(FractionalToken): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(FxnDepositor): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(FxnVoterProxy): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(Gauge_Controller): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(GnosisSafe__0): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(GnosisSafe__1): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(LeveragedToken): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(Lido): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(Market): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(PlatformFeeSpliter): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(RebalancePoolRegistry): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(RebalancePoolSplitter): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(RebalanceWithBonusToken__0): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(RebalanceWithBonusToken__1): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(RebalanceWithBonusToken__2): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(ReservePool): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(SmartWalletWhitelist): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(StETHAndxETHWrapper): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(stETHTreasury): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(Token_Minter): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(Voting_Escrow): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(WstETH): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(wstETHWrapper): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(xHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  RebalancePool.balanceOf(xMinter): '0.0 # {unit:ether,precision:2}'
  RebalancePool.baseRewardToken: WstETH
  RebalancePool.baseToken: Lido
  RebalancePool.epochState.epoch: '0'
  RebalancePool.epochState.prod: '1000000000000000000'
  RebalancePool.epochState.scale: '0'
  RebalancePool.extraRewardsLength: '0.000000000000000001 # {unit:ether}'
  RebalancePool.extraRewardState($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).finishAt: '0'
  RebalancePool.extraRewardState($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).lastUpdate: '0'
  RebalancePool.extraRewardState($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).periodLength: '0'
  RebalancePool.extraRewardState($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState($0x11E91BB6d1334585AA37D8F4fde3932C7960B938).rate: '0'
  RebalancePool.extraRewardState(admin).finishAt: '0'
  RebalancePool.extraRewardState(admin).lastUpdate: '0'
  RebalancePool.extraRewardState(admin).periodLength: '0'
  RebalancePool.extraRewardState(admin).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(admin).rate: '0'
  RebalancePool.extraRewardState(BoostableRebalancePool__0).finishAt: '0'
  RebalancePool.extraRewardState(BoostableRebalancePool__0).lastUpdate: '0'
  RebalancePool.extraRewardState(BoostableRebalancePool__0).periodLength: '0'
  RebalancePool.extraRewardState(BoostableRebalancePool__0).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(BoostableRebalancePool__0).rate: '0'
  RebalancePool.extraRewardState(BoostableRebalancePool__1).finishAt: '0'
  RebalancePool.extraRewardState(BoostableRebalancePool__1).lastUpdate: '0'
  RebalancePool.extraRewardState(BoostableRebalancePool__1).periodLength: '0'
  RebalancePool.extraRewardState(BoostableRebalancePool__1).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(BoostableRebalancePool__1).rate: '0'
  RebalancePool.extraRewardState(Booster).finishAt: '0'
  RebalancePool.extraRewardState(Booster).lastUpdate: '0'
  RebalancePool.extraRewardState(Booster).periodLength: '0'
  RebalancePool.extraRewardState(Booster).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(Booster).rate: '0'
  RebalancePool.extraRewardState(Curve_DAO_Token).finishAt: '0'
  RebalancePool.extraRewardState(Curve_DAO_Token).lastUpdate: '0'
  RebalancePool.extraRewardState(Curve_DAO_Token).periodLength: '0'
  RebalancePool.extraRewardState(Curve_DAO_Token).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(Curve_DAO_Token).rate: '0'
  RebalancePool.extraRewardState(fHolderLiquidator).finishAt: '0'
  RebalancePool.extraRewardState(fHolderLiquidator).lastUpdate: '0'
  RebalancePool.extraRewardState(fHolderLiquidator).periodLength: '0'
  RebalancePool.extraRewardState(fHolderLiquidator).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(fHolderLiquidator).rate: '0'
  RebalancePool.extraRewardState(fHolderRedeemer).finishAt: '0'
  RebalancePool.extraRewardState(fHolderRedeemer).lastUpdate: '0'
  RebalancePool.extraRewardState(fHolderRedeemer).periodLength: '0'
  RebalancePool.extraRewardState(fHolderRedeemer).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(fHolderRedeemer).rate: '0'
  RebalancePool.extraRewardState(fMinter).finishAt: '0'
  RebalancePool.extraRewardState(fMinter).lastUpdate: '0'
  RebalancePool.extraRewardState(fMinter).periodLength: '0'
  RebalancePool.extraRewardState(fMinter).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(fMinter).rate: '0'
  RebalancePool.extraRewardState(FractionalToken).finishAt: '0'
  RebalancePool.extraRewardState(FractionalToken).lastUpdate: '0'
  RebalancePool.extraRewardState(FractionalToken).periodLength: '0'
  RebalancePool.extraRewardState(FractionalToken).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(FractionalToken).rate: '0'
  RebalancePool.extraRewardState(FxnDepositor).finishAt: '0'
  RebalancePool.extraRewardState(FxnDepositor).lastUpdate: '0'
  RebalancePool.extraRewardState(FxnDepositor).periodLength: '0'
  RebalancePool.extraRewardState(FxnDepositor).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(FxnDepositor).rate: '0'
  RebalancePool.extraRewardState(FxnVoterProxy).finishAt: '0'
  RebalancePool.extraRewardState(FxnVoterProxy).lastUpdate: '0'
  RebalancePool.extraRewardState(FxnVoterProxy).periodLength: '0'
  RebalancePool.extraRewardState(FxnVoterProxy).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(FxnVoterProxy).rate: '0'
  RebalancePool.extraRewardState(Gauge_Controller).finishAt: '0'
  RebalancePool.extraRewardState(Gauge_Controller).lastUpdate: '0'
  RebalancePool.extraRewardState(Gauge_Controller).periodLength: '0'
  RebalancePool.extraRewardState(Gauge_Controller).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(Gauge_Controller).rate: '0'
  RebalancePool.extraRewardState(GnosisSafe__0).finishAt: '0'
  RebalancePool.extraRewardState(GnosisSafe__0).lastUpdate: '0'
  RebalancePool.extraRewardState(GnosisSafe__0).periodLength: '0'
  RebalancePool.extraRewardState(GnosisSafe__0).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(GnosisSafe__0).rate: '0'
  RebalancePool.extraRewardState(GnosisSafe__1).finishAt: '0'
  RebalancePool.extraRewardState(GnosisSafe__1).lastUpdate: '0'
  RebalancePool.extraRewardState(GnosisSafe__1).periodLength: '0'
  RebalancePool.extraRewardState(GnosisSafe__1).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(GnosisSafe__1).rate: '0'
  RebalancePool.extraRewardState(LeveragedToken).finishAt: '0'
  RebalancePool.extraRewardState(LeveragedToken).lastUpdate: '0'
  RebalancePool.extraRewardState(LeveragedToken).periodLength: '0'
  RebalancePool.extraRewardState(LeveragedToken).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(LeveragedToken).rate: '0'
  RebalancePool.extraRewardState(Lido).finishAt: '0'
  RebalancePool.extraRewardState(Lido).lastUpdate: '0'
  RebalancePool.extraRewardState(Lido).periodLength: '0'
  RebalancePool.extraRewardState(Lido).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(Lido).rate: '0'
  RebalancePool.extraRewardState(Market).finishAt: '0'
  RebalancePool.extraRewardState(Market).lastUpdate: '0'
  RebalancePool.extraRewardState(Market).periodLength: '0'
  RebalancePool.extraRewardState(Market).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(Market).rate: '0'
  RebalancePool.extraRewardState(MockFxPriceOracle).finishAt: '0'
  RebalancePool.extraRewardState(MockFxPriceOracle).lastUpdate: '0'
  RebalancePool.extraRewardState(MockFxPriceOracle).periodLength: '0'
  RebalancePool.extraRewardState(MockFxPriceOracle).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(MockFxPriceOracle).rate: '0'
  RebalancePool.extraRewardState(PlatformFeeSpliter).finishAt: '0'
  RebalancePool.extraRewardState(PlatformFeeSpliter).lastUpdate: '0'
  RebalancePool.extraRewardState(PlatformFeeSpliter).periodLength: '0'
  RebalancePool.extraRewardState(PlatformFeeSpliter).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(PlatformFeeSpliter).rate: '0'
  RebalancePool.extraRewardState(RebalancePoolRegistry).finishAt: '0'
  RebalancePool.extraRewardState(RebalancePoolRegistry).lastUpdate: '0'
  RebalancePool.extraRewardState(RebalancePoolRegistry).periodLength: '0'
  RebalancePool.extraRewardState(RebalancePoolRegistry).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(RebalancePoolRegistry).rate: '0'
  RebalancePool.extraRewardState(RebalancePoolSplitter).finishAt: '0'
  RebalancePool.extraRewardState(RebalancePoolSplitter).lastUpdate: '0'
  RebalancePool.extraRewardState(RebalancePoolSplitter).periodLength: '0'
  RebalancePool.extraRewardState(RebalancePoolSplitter).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(RebalancePoolSplitter).rate: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__0).finishAt: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__0).lastUpdate: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__0).periodLength: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__0).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__0).rate: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__1).finishAt: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__1).lastUpdate: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__1).periodLength: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__1).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__1).rate: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__2).finishAt: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__2).lastUpdate: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__2).periodLength: '0'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__2).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(RebalanceWithBonusToken__2).rate: '0'
  RebalancePool.extraRewardState(ReservePool).finishAt: '0'
  RebalancePool.extraRewardState(ReservePool).lastUpdate: '0'
  RebalancePool.extraRewardState(ReservePool).periodLength: '0'
  RebalancePool.extraRewardState(ReservePool).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(ReservePool).rate: '0'
  RebalancePool.extraRewardState(SmartWalletWhitelist).finishAt: '0'
  RebalancePool.extraRewardState(SmartWalletWhitelist).lastUpdate: '0'
  RebalancePool.extraRewardState(SmartWalletWhitelist).periodLength: '0'
  RebalancePool.extraRewardState(SmartWalletWhitelist).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(SmartWalletWhitelist).rate: '0'
  RebalancePool.extraRewardState(StETHAndxETHWrapper).finishAt: '0'
  RebalancePool.extraRewardState(StETHAndxETHWrapper).lastUpdate: '0'
  RebalancePool.extraRewardState(StETHAndxETHWrapper).periodLength: '0'
  RebalancePool.extraRewardState(StETHAndxETHWrapper).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(StETHAndxETHWrapper).rate: '0'
  RebalancePool.extraRewardState(stETHTreasury).finishAt: '0'
  RebalancePool.extraRewardState(stETHTreasury).lastUpdate: '0'
  RebalancePool.extraRewardState(stETHTreasury).periodLength: '0'
  RebalancePool.extraRewardState(stETHTreasury).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(stETHTreasury).rate: '0'
  RebalancePool.extraRewardState(Token_Minter).finishAt: '0'
  RebalancePool.extraRewardState(Token_Minter).lastUpdate: '0'
  RebalancePool.extraRewardState(Token_Minter).periodLength: '0'
  RebalancePool.extraRewardState(Token_Minter).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(Token_Minter).rate: '0'
  RebalancePool.extraRewardState(Voting_Escrow).finishAt: '0'
  RebalancePool.extraRewardState(Voting_Escrow).lastUpdate: '0'
  RebalancePool.extraRewardState(Voting_Escrow).periodLength: '0'
  RebalancePool.extraRewardState(Voting_Escrow).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(Voting_Escrow).rate: '0'
  RebalancePool.extraRewardState(WstETH).finishAt: '1703161475'
  RebalancePool.extraRewardState(WstETH).lastUpdate: '1703163575'
  RebalancePool.extraRewardState(WstETH).periodLength: '604800'
  RebalancePool.extraRewardState(WstETH).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(WstETH).rate: '4779806319019'
  RebalancePool.extraRewardState(wstETHWrapper).finishAt: '0'
  RebalancePool.extraRewardState(wstETHWrapper).lastUpdate: '0'
  RebalancePool.extraRewardState(wstETHWrapper).periodLength: '0'
  RebalancePool.extraRewardState(wstETHWrapper).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(wstETHWrapper).rate: '0'
  RebalancePool.extraRewardState(xHolderRedeemer).finishAt: '0'
  RebalancePool.extraRewardState(xHolderRedeemer).lastUpdate: '0'
  RebalancePool.extraRewardState(xHolderRedeemer).periodLength: '0'
  RebalancePool.extraRewardState(xHolderRedeemer).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(xHolderRedeemer).rate: '0'
  RebalancePool.extraRewardState(xMinter).finishAt: '0'
  RebalancePool.extraRewardState(xMinter).lastUpdate: '0'
  RebalancePool.extraRewardState(xMinter).periodLength: '0'
  RebalancePool.extraRewardState(xMinter).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(xMinter).rate: '0'
  RebalancePool.lastAssetLossError: '0.0 # {unit:ether}'
  RebalancePool.liquidatableCollateralRatio: '1.3055 # {unit:ether}'
  RebalancePool.liquidator: RebalanceWithBonusToken__0
  RebalancePool.market: Market
  RebalancePool.owner: GnosisSafe__0
  RebalancePool.rewardManager($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(admin): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(BoostableRebalancePool__0): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(BoostableRebalancePool__1): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(Booster): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(Curve_DAO_Token): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(fHolderLiquidator): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(fHolderRedeemer): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(fMinter): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(FractionalToken): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(FxnDepositor): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(FxnVoterProxy): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(Gauge_Controller): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(GnosisSafe__0): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(GnosisSafe__1): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(LeveragedToken): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(Lido): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(Market): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(PlatformFeeSpliter): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(RebalancePoolRegistry): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(RebalancePoolSplitter): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(RebalanceWithBonusToken__0): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(RebalanceWithBonusToken__1): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(RebalanceWithBonusToken__2): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(ReservePool): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(SmartWalletWhitelist): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(StETHAndxETHWrapper): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(stETHTreasury): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(Token_Minter): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(Voting_Escrow): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(WstETH): RebalancePoolSplitter
  RebalancePool.rewardManager(wstETHWrapper): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(xHolderRedeemer): '0x0000000000000000000000000000000000000000'
  RebalancePool.rewardManager(xMinter): '0x0000000000000000000000000000000000000000'
  RebalancePool.totalSupply: '14242 # {precision:0,unit:ether}'
  RebalancePool.totalUnlocking: '19714.952389819415148249 # {unit:ether}'
  RebalancePool.treasury: stETHTreasury
  RebalancePool.unlockDuration: '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(admin): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(BoostableRebalancePool__0): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(BoostableRebalancePool__1): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(Booster): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(Curve_DAO_Token): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(fHolderLiquidator): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(fHolderRedeemer): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(fMinter): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(FractionalToken): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(FxnDepositor): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(FxnVoterProxy): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(Gauge_Controller): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(GnosisSafe__0): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(GnosisSafe__1): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(LeveragedToken): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(Lido): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(Market): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(MockFxPriceOracle): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(PlatformFeeSpliter): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(RebalancePoolRegistry): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(RebalancePoolSplitter): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(RebalanceWithBonusToken__0): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(RebalanceWithBonusToken__1): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(RebalanceWithBonusToken__2): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(ReservePool): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(SmartWalletWhitelist): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(StETHAndxETHWrapper): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(stETHTreasury): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(Token_Minter): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(Voting_Escrow): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(WstETH): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(wstETHWrapper): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(xHolderRedeemer): '0.0 # {unit:ether}'
  RebalancePool.unlockedBalanceOf(xMinter): '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(admin)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(admin)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(BoostableRebalancePool__0)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(BoostableRebalancePool__0)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(BoostableRebalancePool__1)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(BoostableRebalancePool__1)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Booster)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Booster)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Curve_DAO_Token)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Curve_DAO_Token)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(fHolderLiquidator)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(fHolderLiquidator)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(fHolderRedeemer)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(fHolderRedeemer)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(fMinter)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(fMinter)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(FractionalToken)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(FractionalToken)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(FxnDepositor)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(FxnDepositor)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(FxnVoterProxy)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(FxnVoterProxy)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Gauge_Controller)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Gauge_Controller)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(GnosisSafe__0)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(GnosisSafe__0)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(GnosisSafe__1)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(GnosisSafe__1)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(LeveragedToken)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(LeveragedToken)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Lido)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Lido)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Market)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Market)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(MockFxPriceOracle)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(MockFxPriceOracle)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(PlatformFeeSpliter)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(PlatformFeeSpliter)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(RebalancePoolRegistry)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(RebalancePoolRegistry)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(RebalancePoolSplitter)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(RebalancePoolSplitter)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(RebalanceWithBonusToken__0)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(RebalanceWithBonusToken__0)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(RebalanceWithBonusToken__1)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(RebalanceWithBonusToken__1)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(RebalanceWithBonusToken__2)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(RebalanceWithBonusToken__2)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(ReservePool)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(ReservePool)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(SmartWalletWhitelist)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(SmartWalletWhitelist)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(StETHAndxETHWrapper)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(StETHAndxETHWrapper)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(stETHTreasury)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(stETHTreasury)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Token_Minter)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Token_Minter)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Voting_Escrow)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(Voting_Escrow)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(WstETH)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(WstETH)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(wstETHWrapper)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(wstETHWrapper)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(xHolderRedeemer)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(xHolderRedeemer)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(xMinter)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(xMinter)._unlockAt: '0.0 # {unit:ether}'
  RebalancePool.wrapper: wstETHWrapper
  RebalancePoolRegistry.getPools:
    - RebalancePool
    - BoostableRebalancePool__0
    - BoostableRebalancePool__1
  RebalancePoolRegistry.owner: GnosisSafe__0
  RebalancePoolRegistry.pendingOwner: '0x0000000000000000000000000000000000000000'
  RebalancePoolRegistry.totalSupply: '11472081 # {precision:0,unit:ether}'
  RebalancePoolSplitter.getReceivers($0x11E91BB6d1334585AA37D8F4fde3932C7960B938)._ratios: []
  RebalancePoolSplitter.getReceivers($0x11E91BB6d1334585AA37D8F4fde3932C7960B938)._receivers: []
  RebalancePoolSplitter.getReceivers(admin)._ratios: []
  RebalancePoolSplitter.getReceivers(admin)._receivers: []
  RebalancePoolSplitter.getReceivers(BoostableRebalancePool__0)._ratios: []
  RebalancePoolSplitter.getReceivers(BoostableRebalancePool__0)._receivers: []
  RebalancePoolSplitter.getReceivers(BoostableRebalancePool__1)._ratios: []
  RebalancePoolSplitter.getReceivers(BoostableRebalancePool__1)._receivers: []
  RebalancePoolSplitter.getReceivers(Booster)._ratios: []
  RebalancePoolSplitter.getReceivers(Booster)._receivers: []
  RebalancePoolSplitter.getReceivers(Curve_DAO_Token)._ratios:
    - '500000000'
    - '500000000'
  RebalancePoolSplitter.getReceivers(Curve_DAO_Token)._receivers:
    - BoostableRebalancePool__0
    - BoostableRebalancePool__1
  RebalancePoolSplitter.getReceivers(fHolderLiquidator)._ratios: []
  RebalancePoolSplitter.getReceivers(fHolderLiquidator)._receivers: []
  RebalancePoolSplitter.getReceivers(fHolderRedeemer)._ratios: []
  RebalancePoolSplitter.getReceivers(fHolderRedeemer)._receivers: []
  RebalancePoolSplitter.getReceivers(fMinter)._ratios: []
  RebalancePoolSplitter.getReceivers(fMinter)._receivers: []
  RebalancePoolSplitter.getReceivers(FractionalToken)._ratios: []
  RebalancePoolSplitter.getReceivers(FractionalToken)._receivers: []
  RebalancePoolSplitter.getReceivers(FxnDepositor)._ratios: []
  RebalancePoolSplitter.getReceivers(FxnDepositor)._receivers: []
  RebalancePoolSplitter.getReceivers(FxnVoterProxy)._ratios: []
  RebalancePoolSplitter.getReceivers(FxnVoterProxy)._receivers: []
  RebalancePoolSplitter.getReceivers(Gauge_Controller)._ratios: []
  RebalancePoolSplitter.getReceivers(Gauge_Controller)._receivers: []
  RebalancePoolSplitter.getReceivers(GnosisSafe__0)._ratios: []
  RebalancePoolSplitter.getReceivers(GnosisSafe__0)._receivers: []
  RebalancePoolSplitter.getReceivers(GnosisSafe__1)._ratios: []
  RebalancePoolSplitter.getReceivers(GnosisSafe__1)._receivers: []
  RebalancePoolSplitter.getReceivers(LeveragedToken)._ratios: []
  RebalancePoolSplitter.getReceivers(LeveragedToken)._receivers: []
  RebalancePoolSplitter.getReceivers(Lido)._ratios: []
  RebalancePoolSplitter.getReceivers(Lido)._receivers: []
  RebalancePoolSplitter.getReceivers(Market)._ratios: []
  RebalancePoolSplitter.getReceivers(Market)._receivers: []
  RebalancePoolSplitter.getReceivers(MockFxPriceOracle)._ratios: []
  RebalancePoolSplitter.getReceivers(MockFxPriceOracle)._receivers: []
  RebalancePoolSplitter.getReceivers(PlatformFeeSpliter)._ratios: []
  RebalancePoolSplitter.getReceivers(PlatformFeeSpliter)._receivers: []
  RebalancePoolSplitter.getReceivers(RebalancePool)._ratios: []
  RebalancePoolSplitter.getReceivers(RebalancePool)._receivers: []
  RebalancePoolSplitter.getReceivers(RebalancePoolRegistry)._ratios: []
  RebalancePoolSplitter.getReceivers(RebalancePoolRegistry)._receivers: []
  RebalancePoolSplitter.getReceivers(RebalanceWithBonusToken__0)._ratios: []
  RebalancePoolSplitter.getReceivers(RebalanceWithBonusToken__0)._receivers: []
  RebalancePoolSplitter.getReceivers(RebalanceWithBonusToken__1)._ratios: []
  RebalancePoolSplitter.getReceivers(RebalanceWithBonusToken__1)._receivers: []
  RebalancePoolSplitter.getReceivers(RebalanceWithBonusToken__2)._ratios: []
  RebalancePoolSplitter.getReceivers(RebalanceWithBonusToken__2)._receivers: []
  RebalancePoolSplitter.getReceivers(ReservePool)._ratios: []
  RebalancePoolSplitter.getReceivers(ReservePool)._receivers: []
  RebalancePoolSplitter.getReceivers(SmartWalletWhitelist)._ratios: []
  RebalancePoolSplitter.getReceivers(SmartWalletWhitelist)._receivers: []
  RebalancePoolSplitter.getReceivers(StETHAndxETHWrapper)._ratios: []
  RebalancePoolSplitter.getReceivers(StETHAndxETHWrapper)._receivers: []
  RebalancePoolSplitter.getReceivers(stETHTreasury)._ratios: []
  RebalancePoolSplitter.getReceivers(stETHTreasury)._receivers: []
  RebalancePoolSplitter.getReceivers(Token_Minter)._ratios: []
  RebalancePoolSplitter.getReceivers(Token_Minter)._receivers: []
  RebalancePoolSplitter.getReceivers(Voting_Escrow)._ratios: []
  RebalancePoolSplitter.getReceivers(Voting_Escrow)._receivers: []
  RebalancePoolSplitter.getReceivers(WstETH)._ratios:
    - '500000000'
    - '500000000'
  RebalancePoolSplitter.getReceivers(WstETH)._receivers:
    - BoostableRebalancePool__0
    - BoostableRebalancePool__1
  RebalancePoolSplitter.getReceivers(wstETHWrapper)._ratios: []
  RebalancePoolSplitter.getReceivers(wstETHWrapper)._receivers: []
  RebalancePoolSplitter.getReceivers(xHolderRedeemer)._ratios: []
  RebalancePoolSplitter.getReceivers(xHolderRedeemer)._receivers: []
  RebalancePoolSplitter.getReceivers(xMinter)._ratios: []
  RebalancePoolSplitter.getReceivers(xMinter)._receivers: []
  RebalancePoolSplitter.owner: GnosisSafe__0
  RebalancePoolSplitter.pendingOwner: '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(admin): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(BoostableRebalancePool__0): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(BoostableRebalancePool__1): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(Booster): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(Curve_DAO_Token): '0x81243a88Dd9Fb963c643bD3f2194c2cA9CCFc428'
  RebalancePoolSplitter.splitter(fHolderLiquidator): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(fHolderRedeemer): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(fMinter): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(FractionalToken): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(FxnDepositor): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(FxnVoterProxy): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(Gauge_Controller): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(GnosisSafe__0): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(GnosisSafe__1): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(LeveragedToken): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(Lido): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(Market): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(PlatformFeeSpliter): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(RebalancePool): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(RebalancePoolRegistry): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(RebalanceWithBonusToken__0): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(RebalanceWithBonusToken__1): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(RebalanceWithBonusToken__2): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(ReservePool): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(SmartWalletWhitelist): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(StETHAndxETHWrapper): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(stETHTreasury): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(Token_Minter): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(Voting_Escrow): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(WstETH): stETHTreasury
  RebalancePoolSplitter.splitter(wstETHWrapper): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(xHolderRedeemer): '0x0000000000000000000000000000000000000000'
  RebalancePoolSplitter.splitter(xMinter): '0x0000000000000000000000000000000000000000'
  RebalanceWithBonusToken__0.bonus: '2.0 # {unit:ether}'
  RebalanceWithBonusToken__0.bonusToken: Curve_DAO_Token
  RebalanceWithBonusToken__0.owner: GnosisSafe__0
  RebalanceWithBonusToken__0.stabilityPool: RebalancePool
  RebalanceWithBonusToken__1.bonus: '1.0 # {unit:ether}'
  RebalanceWithBonusToken__1.bonusToken: Curve_DAO_Token
  RebalanceWithBonusToken__1.owner: GnosisSafe__0
  RebalanceWithBonusToken__1.stabilityPool: BoostableRebalancePool__0
  RebalanceWithBonusToken__2.bonus: '1.0 # {unit:ether}'
  RebalanceWithBonusToken__2.bonusToken: Curve_DAO_Token
  RebalanceWithBonusToken__2.owner: GnosisSafe__0
  RebalanceWithBonusToken__2.stabilityPool: BoostableRebalancePool__1
  ReservePool.bonusRatio($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(admin): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(BoostableRebalancePool__0): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(BoostableRebalancePool__1): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(Booster): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(Curve_DAO_Token): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(fHolderLiquidator): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(fHolderRedeemer): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(fMinter): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(FractionalToken): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(FxnDepositor): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(FxnVoterProxy): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(Gauge_Controller): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(GnosisSafe__0): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(GnosisSafe__1): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(LeveragedToken): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(Lido): '0.05 # {unit:ether}'
  ReservePool.bonusRatio(Market): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(MockFxPriceOracle): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(PlatformFeeSpliter): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(RebalancePool): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(RebalancePoolRegistry): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(RebalancePoolSplitter): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(RebalanceWithBonusToken__0): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(RebalanceWithBonusToken__1): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(RebalanceWithBonusToken__2): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(SmartWalletWhitelist): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(StETHAndxETHWrapper): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(stETHTreasury): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(Token_Minter): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(Voting_Escrow): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(WstETH): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(wstETHWrapper): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(xHolderRedeemer): '0.0 # {unit:ether}'
  ReservePool.bonusRatio(xMinter): '0.0 # {unit:ether}'
  ReservePool.fToken: FractionalToken
  ReservePool.market: Market
  SmartWalletWhitelist.checker: '0x0000000000000000000000000000000000000000'
  SmartWalletWhitelist.future_checker: '0x0000000000000000000000000000000000000000'
  SmartWalletWhitelist.owner: GnosisSafe__0
  StETHAndxETHWrapper.dst: LeveragedToken
  StETHAndxETHWrapper.market: Market
  StETHAndxETHWrapper.platform: PlatformFeeSpliter
  StETHAndxETHWrapper.src: Lido
  stETHTreasury.baseToken: Lido
  stETHTreasury.baseTokenCap: '10000.0 # {unit:ether}'
  stETHTreasury.beta: '0.1 # {unit:ether}'
  stETHTreasury.collateralRatio: '1.878 # {unit:ether,precision:3}'
  stETHTreasury.emaLeverageRatio.lastEmaValue: '1985630000000000000 # {precision:-13}'
  stETHTreasury.emaLeverageRatio.lastTime: '1707713590 # {precision:-1}'
  stETHTreasury.emaLeverageRatio.lastValue: '1983800545126983346'
  stETHTreasury.emaLeverageRatio.sampleInterval: '86400'
  stETHTreasury.fToken: FractionalToken
  stETHTreasury.getCurrentNav._baseNav: '2500.87 # {unit:ether,precision:2}'
  stETHTreasury.getCurrentNav._fNav: '1.036 # {unit:ether,precision:3}'
  stETHTreasury.getCurrentNav._xNav: '1.534 # {unit:ether,precision:3}'
  stETHTreasury.harvestBountyRatio: '10000000000000000'
  stETHTreasury.lastPermissionedPrice: '1836.7853 # {unit:ether}'
  stETHTreasury.leverageRatio: '1.986 # {unit:ether,precision:3}'
  stETHTreasury.market: Market
  stETHTreasury.owner: GnosisSafe__0
  stETHTreasury.platform: PlatformFeeSpliter
  stETHTreasury.priceOracle: MockFxPriceOracle
  stETHTreasury.rateProvider: '0x0000000000000000000000000000000000000000'
  stETHTreasury.rebalancePool: RebalancePoolSplitter
  stETHTreasury.rebalancePoolRatio: '500000000000000000'
  stETHTreasury.strategy: '0x0000000000000000000000000000000000000000'
  stETHTreasury.strategyUnderlying: '0.0 # {unit:ether}'
  stETHTreasury.totalBaseToken: '9444.807757115345432463 # {unit:ether}'
  stETHTreasury.xToken: LeveragedToken
  Token_Minter.controller: Gauge_Controller
  Token_Minter.token: Curve_DAO_Token
  Voting_Escrow.admin: GnosisSafe__0
  Voting_Escrow.balanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(admin): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(BoostableRebalancePool__0): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(BoostableRebalancePool__1): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(Booster): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(Curve_DAO_Token): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(fHolderLiquidator): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(fHolderRedeemer): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(fMinter): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(FractionalToken): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(FxnDepositor): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(FxnVoterProxy): '46358.3 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(Gauge_Controller): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(GnosisSafe__0): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(GnosisSafe__1): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(LeveragedToken): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(Lido): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(Market): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(PlatformFeeSpliter): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(RebalancePool): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(RebalancePoolRegistry): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(RebalancePoolSplitter): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(RebalanceWithBonusToken__0): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(RebalanceWithBonusToken__1): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(RebalanceWithBonusToken__2): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(ReservePool): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(SmartWalletWhitelist): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(StETHAndxETHWrapper): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(stETHTreasury): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(Token_Minter): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(WstETH): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(wstETHWrapper): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(xHolderRedeemer): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(xMinter): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.controller: GnosisSafe__0
  Voting_Escrow.decimals: '18 # {}'
  Voting_Escrow.epoch: '310 # {}'
  Voting_Escrow.future_admin: GnosisSafe__0
  Voting_Escrow.future_smart_wallet_checker: SmartWalletWhitelist
  Voting_Escrow.get_last_user_slope($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0'
  Voting_Escrow.get_last_user_slope(admin): '0'
  Voting_Escrow.get_last_user_slope(BoostableRebalancePool__0): '0'
  Voting_Escrow.get_last_user_slope(BoostableRebalancePool__1): '0'
  Voting_Escrow.get_last_user_slope(Booster): '0'
  Voting_Escrow.get_last_user_slope(Curve_DAO_Token): '0'
  Voting_Escrow.get_last_user_slope(fHolderLiquidator): '0'
  Voting_Escrow.get_last_user_slope(fHolderRedeemer): '0'
  Voting_Escrow.get_last_user_slope(fMinter): '0'
  Voting_Escrow.get_last_user_slope(FractionalToken): '0'
  Voting_Escrow.get_last_user_slope(FxnDepositor): '0'
  Voting_Escrow.get_last_user_slope(FxnVoterProxy): '373190060460180'
  Voting_Escrow.get_last_user_slope(Gauge_Controller): '0'
  Voting_Escrow.get_last_user_slope(GnosisSafe__0): '0'
  Voting_Escrow.get_last_user_slope(GnosisSafe__1): '0'
  Voting_Escrow.get_last_user_slope(LeveragedToken): '0'
  Voting_Escrow.get_last_user_slope(Lido): '0'
  Voting_Escrow.get_last_user_slope(Market): '0'
  Voting_Escrow.get_last_user_slope(MockFxPriceOracle): '0'
  Voting_Escrow.get_last_user_slope(PlatformFeeSpliter): '0'
  Voting_Escrow.get_last_user_slope(RebalancePool): '0'
  Voting_Escrow.get_last_user_slope(RebalancePoolRegistry): '0'
  Voting_Escrow.get_last_user_slope(RebalancePoolSplitter): '0'
  Voting_Escrow.get_last_user_slope(RebalanceWithBonusToken__0): '0'
  Voting_Escrow.get_last_user_slope(RebalanceWithBonusToken__1): '0'
  Voting_Escrow.get_last_user_slope(RebalanceWithBonusToken__2): '0'
  Voting_Escrow.get_last_user_slope(ReservePool): '0'
  Voting_Escrow.get_last_user_slope(SmartWalletWhitelist): '0'
  Voting_Escrow.get_last_user_slope(StETHAndxETHWrapper): '0'
  Voting_Escrow.get_last_user_slope(stETHTreasury): '0'
  Voting_Escrow.get_last_user_slope(Token_Minter): '0'
  Voting_Escrow.get_last_user_slope(WstETH): '0'
  Voting_Escrow.get_last_user_slope(wstETHWrapper): '0'
  Voting_Escrow.get_last_user_slope(xHolderRedeemer): '0'
  Voting_Escrow.get_last_user_slope(xMinter): '0'
  Voting_Escrow.locked__end($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(admin): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(BoostableRebalancePool__0): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(BoostableRebalancePool__1): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(Booster): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(Curve_DAO_Token): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(fHolderLiquidator): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(fHolderRedeemer): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(fMinter): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(FractionalToken): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(FxnDepositor): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(FxnVoterProxy): '0.0000000018319392 # {unit:ether}'
  Voting_Escrow.locked__end(Gauge_Controller): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(GnosisSafe__0): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(GnosisSafe__1): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(LeveragedToken): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(Lido): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(Market): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(MockFxPriceOracle): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(PlatformFeeSpliter): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(RebalancePool): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(RebalancePoolRegistry): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(RebalancePoolSplitter): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(RebalanceWithBonusToken__0): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(RebalanceWithBonusToken__1): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(RebalanceWithBonusToken__2): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(ReservePool): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(SmartWalletWhitelist): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(StETHAndxETHWrapper): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(stETHTreasury): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(Token_Minter): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(WstETH): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(wstETHWrapper): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(xHolderRedeemer): '0.0 # {unit:ether}'
  Voting_Escrow.locked__end(xMinter): '0.0 # {unit:ether}'
  Voting_Escrow.smart_wallet_checker: SmartWalletWhitelist
  Voting_Escrow.supply: '119837.435444639915103636 # {unit:ether}'
  Voting_Escrow.token: Curve_DAO_Token
  Voting_Escrow.totalSupply: '97569 # {precision:0,unit:ether}'
  Voting_Escrow.user_point_epoch($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(admin): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(BoostableRebalancePool__0): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(BoostableRebalancePool__1): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(Booster): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(Curve_DAO_Token): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(fHolderLiquidator): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(fHolderRedeemer): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(fMinter): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(FractionalToken): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(FxnDepositor): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(FxnVoterProxy): '0.000000000000000039 # {unit:ether}'
  Voting_Escrow.user_point_epoch(Gauge_Controller): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(GnosisSafe__0): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(GnosisSafe__1): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(LeveragedToken): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(Lido): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(Market): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(MockFxPriceOracle): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(PlatformFeeSpliter): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(RebalancePool): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(RebalancePoolRegistry): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(RebalancePoolSplitter): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(RebalanceWithBonusToken__0): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(RebalanceWithBonusToken__1): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(RebalanceWithBonusToken__2): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(ReservePool): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(SmartWalletWhitelist): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(StETHAndxETHWrapper): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(stETHTreasury): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(Token_Minter): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(WstETH): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(wstETHWrapper): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(xHolderRedeemer): '0.0 # {unit:ether}'
  Voting_Escrow.user_point_epoch(xMinter): '0.0 # {unit:ether}'
  WstETH.balanceOf($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(admin): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(BoostableRebalancePool__0): '8.36 # {unit:ether,precision:2}'
  WstETH.balanceOf(BoostableRebalancePool__1): '8.28 # {unit:ether,precision:2}'
  WstETH.balanceOf(Booster): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(Curve_DAO_Token): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(fHolderLiquidator): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(fHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(fMinter): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(FractionalToken): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(FxnDepositor): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(FxnVoterProxy): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(Gauge_Controller): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(GnosisSafe__0): '0.00 # {unit:ether,precision:2}'
  WstETH.balanceOf(GnosisSafe__1): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(LeveragedToken): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(Lido): '0.02 # {unit:ether,precision:2}'
  WstETH.balanceOf(Market): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(PlatformFeeSpliter): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(RebalancePool): '1.16 # {unit:ether,precision:2}'
  WstETH.balanceOf(RebalancePoolRegistry): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(RebalancePoolSplitter): '0.00 # {unit:ether,precision:2}'
  WstETH.balanceOf(RebalanceWithBonusToken__0): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(RebalanceWithBonusToken__1): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(RebalanceWithBonusToken__2): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(ReservePool): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(SmartWalletWhitelist): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(StETHAndxETHWrapper): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(stETHTreasury): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(Token_Minter): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(Voting_Escrow): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(wstETHWrapper): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(xHolderRedeemer): '0.0 # {unit:ether,precision:2}'
  WstETH.balanceOf(xMinter): '0.0 # {unit:ether,precision:2}'
  WstETH.decimals: '18 # {}'
  WstETH.nonces($0x11E91BB6d1334585AA37D8F4fde3932C7960B938): '0 # {}'
  WstETH.nonces(admin): '0 # {}'
  WstETH.nonces(BoostableRebalancePool__0): '0 # {}'
  WstETH.nonces(BoostableRebalancePool__1): '0 # {}'
  WstETH.nonces(Booster): '0 # {}'
  WstETH.nonces(Curve_DAO_Token): '0 # {}'
  WstETH.nonces(fHolderLiquidator): '0 # {}'
  WstETH.nonces(fHolderRedeemer): '0 # {}'
  WstETH.nonces(fMinter): '0 # {}'
  WstETH.nonces(FractionalToken): '0 # {}'
  WstETH.nonces(FxnDepositor): '0 # {}'
  WstETH.nonces(FxnVoterProxy): '0 # {}'
  WstETH.nonces(Gauge_Controller): '0 # {}'
  WstETH.nonces(GnosisSafe__0): '0 # {}'
  WstETH.nonces(GnosisSafe__1): '0 # {}'
  WstETH.nonces(LeveragedToken): '0 # {}'
  WstETH.nonces(Lido): '0 # {}'
  WstETH.nonces(Market): '0 # {}'
  WstETH.nonces(MockFxPriceOracle): '0 # {}'
  WstETH.nonces(PlatformFeeSpliter): '0 # {}'
  WstETH.nonces(RebalancePool): '0 # {}'
  WstETH.nonces(RebalancePoolRegistry): '0 # {}'
  WstETH.nonces(RebalancePoolSplitter): '0 # {}'
  WstETH.nonces(RebalanceWithBonusToken__0): '0 # {}'
  WstETH.nonces(RebalanceWithBonusToken__1): '0 # {}'
  WstETH.nonces(RebalanceWithBonusToken__2): '0 # {}'
  WstETH.nonces(ReservePool): '0 # {}'
  WstETH.nonces(SmartWalletWhitelist): '0 # {}'
  WstETH.nonces(StETHAndxETHWrapper): '0 # {}'
  WstETH.nonces(stETHTreasury): '0 # {}'
  WstETH.nonces(Token_Minter): '0 # {}'
  WstETH.nonces(Voting_Escrow): '0 # {}'
  WstETH.nonces(wstETHWrapper): '0 # {}'
  WstETH.nonces(xHolderRedeemer): '0 # {}'
  WstETH.nonces(xMinter): '0 # {}'
  WstETH.stETH: Lido
  WstETH.stEthPerToken: '1.156751534262936691 # {unit:ether}'
  WstETH.tokensPerStEth: '0.86448988428373581 # {unit:ether}'
  WstETH.totalSupply: '3067377 # {precision:0,unit:ether}'
  wstETHWrapper.dst: WstETH
  wstETHWrapper.src: Lido
