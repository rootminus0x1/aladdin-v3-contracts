simulation:
  - trigger:
      name: ETH
    gas: 43567n
addresses:
  BoostableRebalancePool__0: BoostableRebalancePool@0xc6dEe5913e010895F3702bc43a40d661B13a40BD
  BoostableRebalancePool__1: BoostableRebalancePool@0xB87A8332dFb1C76Bb22477dCfEdDeB69865cA9f9
  Curve_DAO_Token: Curve DAO Token@0x365AccFCa291e7D3914637ABf1F7635dB165Bb09
  FractionalToken: FractionalToken@0x53805A76E1f5ebbFE7115F16f9c87C2f7e633726
  Gauge_Controller: Gauge Controller@0xe60eB8098B34eD775ac44B1ddE864e098C6d7f37
  LeveragedToken: LeveragedToken@0xe063F04f280c60aECa68b38341C2eEcBeC703ae2
  Lido: Lido@0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84
  MockFxPriceOracle: MockFxPriceOracle@0xF357118EBd576f3C812c7875B1A1651a7f140E9C
  PlatformFeeSpliter: PlatformFeeSpliter@0x0084C2e1B1823564e597Ff4848a88D61ac63D703
  RebalancePool: RebalancePool@0xa677d95B91530d56791FbA72C01a862f1B01A49e
  RebalancePoolSplitter: RebalancePoolSplitter@0x79c5f5b0753acE25ecdBdA4c2Bc86Ab074B6c2Bb
  ReservePool: ReservePool@0x5d0Aacf75116d1645Db2B3d1Ca4b303ef0CA3752
  stETHTreasury: stETHTreasury@0x0e5CAA5c889Bdf053c9A76395f62267E653AFbb0
  Voting_Escrow: Voting Escrow@0xEC6B8A3F3605B083F7044C0F31f2cac0caf1d469
  WstETH: WstETH@0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0
contracts:
  BoostableRebalancePool:
    balanceOf: uint256
    boostCheckpoint.historyIndex: uint32
    boostCheckpoint.veBalance: uint112
    boostCheckpoint.veSupply: uint112
    distributors: address
    getBoostRatio: uint256
    pendingRewards.0: uint256
    pendingRewards.1: uint256
    rewardData.finishAt: uint40
    rewardData.lastUpdate: uint40
    rewardData.queued: uint96
    rewardData.rate: uint80
    rewardReceiver: address
  Curve DAO Token:
    balanceOf: uint256
  FractionalToken:
    balanceOf: uint256
  Gauge Controller:
    gauge_relative_weight: uint256
    gauge_types: int128
    get_gauge_weight: uint256
    time_weight: uint256
    vote_user_power: uint256
  LeveragedToken:
    balanceOf: uint256
  Lido:
    balanceOf: uint256
    nonces: uint256
    sharesOf: uint256
  MockFxPriceOracle:
    getPrice._maxUnsafePrice: uint256
    getPrice._minUnsafePrice: uint256
    getPrice._safePrice: uint256
    price: uint256
  PlatformFeeSpliter:
    burners: address
  RebalancePool:
    balanceOf: uint256
    extraRewardState.finishAt: uint48
    extraRewardState.lastUpdate: uint48
    extraRewardState.periodLength: uint32
    extraRewardState.queued: uint256
    extraRewardState.rate: uint128
    rewardManager: address
    unlockedBalanceOf: uint256
    unlockingBalanceOf._balance: uint256
    unlockingBalanceOf._unlockAt: uint256
  RebalancePoolSplitter:
    getReceivers._ratios: uint256[]
    getReceivers._receivers: address[]
    splitter: address
  ReservePool:
    bonusRatio: uint256
  stETHTreasury:
    leverageRatio: uint256
    priceOracle: address
  Voting Escrow:
    balanceOf: uint256
    get_last_user_slope: int128
    locked__end: uint256
    totalSupply: uint256
    user_point_epoch: uint256
  WstETH:
    balanceOf: uint256
    nonces: uint256
readings:
  BoostableRebalancePool__0.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__0.boostCheckpoint(MockFxPriceOracle).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(MockFxPriceOracle).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.boostCheckpoint(MockFxPriceOracle).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__0.distributors(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__0.getBoostRatio(MockFxPriceOracle): '0.0 # {unit:ether}'
  BoostableRebalancePool__0.pendingRewards(MockFxPriceOracle).0: '0.0 # {unit:ether,precision:4}'
  BoostableRebalancePool__0.pendingRewards(MockFxPriceOracle).1: '0.0 # {unit:ether,precision:4}'
  BoostableRebalancePool__0.pendingRewards(WstETH).1: '+0.0000 # {unit:ether,precision:4}'
  BoostableRebalancePool__0.rewardData(MockFxPriceOracle).finishAt: '0'
  BoostableRebalancePool__0.rewardData(MockFxPriceOracle).lastUpdate: '0'
  BoostableRebalancePool__0.rewardData(MockFxPriceOracle).queued: '0'
  BoostableRebalancePool__0.rewardData(MockFxPriceOracle).rate: '0'
  BoostableRebalancePool__0.rewardReceiver(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  BoostableRebalancePool__1.boostCheckpoint(MockFxPriceOracle).historyIndex: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(MockFxPriceOracle).veBalance: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.boostCheckpoint(MockFxPriceOracle).veSupply: >-
    could not decode result data
    (value="0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    info={ "method": "boostCheckpoint", "signature": "boostCheckpoint(address)"
    }, code=BAD_DATA, version=6.9.0)
  BoostableRebalancePool__1.distributors(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  BoostableRebalancePool__1.getBoostRatio(MockFxPriceOracle): '0.0 # {unit:ether}'
  BoostableRebalancePool__1.pendingRewards(MockFxPriceOracle).0: '0.0 # {unit:ether,precision:4}'
  BoostableRebalancePool__1.pendingRewards(MockFxPriceOracle).1: '0.0 # {unit:ether,precision:4}'
  BoostableRebalancePool__1.pendingRewards(WstETH).1: '+0.0000 # {unit:ether,precision:4}'
  BoostableRebalancePool__1.rewardData(MockFxPriceOracle).finishAt: '0'
  BoostableRebalancePool__1.rewardData(MockFxPriceOracle).lastUpdate: '0'
  BoostableRebalancePool__1.rewardData(MockFxPriceOracle).queued: '0'
  BoostableRebalancePool__1.rewardData(MockFxPriceOracle).rate: '0'
  BoostableRebalancePool__1.rewardReceiver(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  Curve_DAO_Token.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  FractionalToken.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  Gauge_Controller.gauge_relative_weight(MockFxPriceOracle): '0.0 # {unit:ether}'
  Gauge_Controller.gauge_types(MockFxPriceOracle): Transaction reverted without a reason string
  Gauge_Controller.get_gauge_weight(MockFxPriceOracle): '0.0 # {unit:ether}'
  Gauge_Controller.time_weight(MockFxPriceOracle): '0.0 # {unit:ether}'
  Gauge_Controller.vote_user_power(MockFxPriceOracle): '0.0 # {unit:ether}'
  LeveragedToken.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  Lido.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  Lido.nonces(MockFxPriceOracle): '0 # {}'
  Lido.sharesOf(MockFxPriceOracle): '0.0 # {unit:ether}'
  MockFxPriceOracle.getPrice._maxUnsafePrice: '2500.9 # {unit:ether,precision:1}'
  MockFxPriceOracle.getPrice._minUnsafePrice: '2500.9 # {unit:ether,precision:1}'
  MockFxPriceOracle.getPrice._safePrice: '2500.9 # {unit:ether,precision:1}'
  MockFxPriceOracle.price: '2500.870729485066666666 # {unit:ether}'
  PlatformFeeSpliter.burners(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  RebalancePool.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  RebalancePool.extraRewardState(MockFxPriceOracle).finishAt: '0'
  RebalancePool.extraRewardState(MockFxPriceOracle).lastUpdate: '0'
  RebalancePool.extraRewardState(MockFxPriceOracle).periodLength: '0'
  RebalancePool.extraRewardState(MockFxPriceOracle).queued: '0.0 # {unit:ether}'
  RebalancePool.extraRewardState(MockFxPriceOracle).rate: '0'
  RebalancePool.rewardManager(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  RebalancePool.unlockedBalanceOf(MockFxPriceOracle): '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(MockFxPriceOracle)._balance: '0.0 # {unit:ether}'
  RebalancePool.unlockingBalanceOf(MockFxPriceOracle)._unlockAt: '0.0 # {unit:ether}'
  RebalancePoolSplitter.getReceivers(MockFxPriceOracle)._ratios: []
  RebalancePoolSplitter.getReceivers(MockFxPriceOracle)._receivers: []
  RebalancePoolSplitter.splitter(MockFxPriceOracle): '0x0000000000000000000000000000000000000000'
  ReservePool.bonusRatio(MockFxPriceOracle): '0.0 # {unit:ether}'
  stETHTreasury.leverageRatio: '+0.000 # {unit:ether,precision:3}'
  stETHTreasury.priceOracle: '"FxETHTwapOracle" -> "MockFxPriceOracle}"'
  Voting_Escrow.balanceOf(FxnVoterProxy): '+0.0 # {unit:ether,precision:1}'
  Voting_Escrow.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:1}'
  Voting_Escrow.get_last_user_slope(MockFxPriceOracle): '0'
  Voting_Escrow.locked__end(MockFxPriceOracle): '0.0 # {unit:ether}'
  Voting_Escrow.totalSupply: '+0 # {precision:0,unit:ether}'
  Voting_Escrow.user_point_epoch(MockFxPriceOracle): '0.0 # {unit:ether}'
  WstETH.balanceOf(MockFxPriceOracle): '0.0 # {unit:ether,precision:2}'
  WstETH.nonces(MockFxPriceOracle): '0 # {}'
